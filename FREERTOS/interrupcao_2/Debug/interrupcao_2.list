
interrupcao_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001670  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001730  08001730  00002730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001780  08001780  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001780  08001780  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001780  08001780  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001780  08001780  00002780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001784  08001784  00002784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001788  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  2000000c  08001794  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  08001794  00003d84  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ca4  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001223  00000000  00000000  00007cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00008f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d4  00000000  00000000  00009578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000015da  00000000  00000000  00009a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006695  00000000  00000000  0000b026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008518f  00000000  00000000  000116bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009684a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015c0  00000000  00000000  00096890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00097e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001718 	.word	0x08001718

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001718 	.word	0x08001718

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	@ 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000248:	46c0      	nop			@ (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	@ 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	@ (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	@ 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	@ 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	@ 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	@ (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	@ 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	@ (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	@ 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	@ 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	@ (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			@ (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <EXTI4_15_IRQHandler>:
void Tarefa_saida(void const * argument);

/* USER CODE BEGIN PFP */


void EXTI4_15_IRQHandler(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0

	if(EXTI->FPR1 & EXTI_FPR1_FPIF9){
 8000336:	4b1d      	ldr	r3, [pc, #116]	@ (80003ac <EXTI4_15_IRQHandler+0x7c>)
 8000338:	691a      	ldr	r2, [r3, #16]
 800033a:	2380      	movs	r3, #128	@ 0x80
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	4013      	ands	r3, r2
 8000340:	d030      	beq.n	80003a4 <EXTI4_15_IRQHandler+0x74>
	EXTI->FPR1 |= EXTI_FPR1_FPIF9;
 8000342:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <EXTI4_15_IRQHandler+0x7c>)
 8000344:	691a      	ldr	r2, [r3, #16]
 8000346:	4b19      	ldr	r3, [pc, #100]	@ (80003ac <EXTI4_15_IRQHandler+0x7c>)
 8000348:	2180      	movs	r1, #128	@ 0x80
 800034a:	0089      	lsls	r1, r1, #2
 800034c:	430a      	orrs	r2, r1
 800034e:	611a      	str	r2, [r3, #16]

		bool current_state = atomic_load(&SAIDA_STATE);
 8000350:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <EXTI4_15_IRQHandler+0x80>)
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f3bf 8f5b 	dmb	ish
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	f3bf 8f5b 	dmb	ish
 8000360:	b2db      	uxtb	r3, r3
 8000362:	001a      	movs	r2, r3
 8000364:	1cfb      	adds	r3, r7, #3
 8000366:	701a      	strb	r2, [r3, #0]
 8000368:	1cfb      	adds	r3, r7, #3
 800036a:	781a      	ldrb	r2, [r3, #0]
 800036c:	210b      	movs	r1, #11
 800036e:	187b      	adds	r3, r7, r1
 8000370:	701a      	strb	r2, [r3, #0]
		atomic_store(&SAIDA_STATE, !current_state);
 8000372:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <EXTI4_15_IRQHandler+0x80>)
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	187b      	adds	r3, r7, r1
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	1e5a      	subs	r2, r3, #1
 800037c:	4193      	sbcs	r3, r2
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2201      	movs	r2, #1
 8000382:	4053      	eors	r3, r2
 8000384:	b2db      	uxtb	r3, r3
 8000386:	1c1a      	adds	r2, r3, #0
 8000388:	2301      	movs	r3, #1
 800038a:	4013      	ands	r3, r2
 800038c:	b2da      	uxtb	r2, r3
 800038e:	1cbb      	adds	r3, r7, #2
 8000390:	701a      	strb	r2, [r3, #0]
 8000392:	1cbb      	adds	r3, r7, #2
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	001a      	movs	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f3bf 8f5b 	dmb	ish
 800039e:	701a      	strb	r2, [r3, #0]
 80003a0:	f3bf 8f5b 	dmb	ish
		}

}
 80003a4:	46c0      	nop			@ (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b004      	add	sp, #16
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40021800 	.word	0x40021800
 80003b0:	20000028 	.word	0x20000028

080003b4 <GPIO_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GPIO_Config(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    // Habilita o clock do GPIO A
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80003b8:	4b39      	ldr	r3, [pc, #228]	@ (80004a0 <GPIO_Config+0xec>)
 80003ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003bc:	4b38      	ldr	r3, [pc, #224]	@ (80004a0 <GPIO_Config+0xec>)
 80003be:	2101      	movs	r1, #1
 80003c0:	430a      	orrs	r2, r1
 80003c2:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 80003c4:	4b36      	ldr	r3, [pc, #216]	@ (80004a0 <GPIO_Config+0xec>)
 80003c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003c8:	4b35      	ldr	r3, [pc, #212]	@ (80004a0 <GPIO_Config+0xec>)
 80003ca:	2102      	movs	r1, #2
 80003cc:	430a      	orrs	r2, r1
 80003ce:	635a      	str	r2, [r3, #52]	@ 0x34



    GPIOA->MODER &= ~(0x3 << (1 * 2));  // Limpa os bits de modo para PA1
 80003d0:	23a0      	movs	r3, #160	@ 0xa0
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	23a0      	movs	r3, #160	@ 0xa0
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	210c      	movs	r1, #12
 80003dc:	438a      	bics	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0x1 << (1 * 2));   // Configura PA1 como saída
 80003e0:	23a0      	movs	r3, #160	@ 0xa0
 80003e2:	05db      	lsls	r3, r3, #23
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	23a0      	movs	r3, #160	@ 0xa0
 80003e8:	05db      	lsls	r3, r3, #23
 80003ea:	2104      	movs	r1, #4
 80003ec:	430a      	orrs	r2, r1
 80003ee:	601a      	str	r2, [r3, #0]

    GPIOA->MODER &= ~(0x3 << (2 * 2));  // Limpa os bits de modo para PA2
 80003f0:	23a0      	movs	r3, #160	@ 0xa0
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	23a0      	movs	r3, #160	@ 0xa0
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	2130      	movs	r1, #48	@ 0x30
 80003fc:	438a      	bics	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0x1 << (2 * 2));   // Configura PA2 como saída
 8000400:	23a0      	movs	r3, #160	@ 0xa0
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	23a0      	movs	r3, #160	@ 0xa0
 8000408:	05db      	lsls	r3, r3, #23
 800040a:	2110      	movs	r1, #16
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]



    /********** PB9 set for EXTI ************/
    /*set Input (0b00)*/
    GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE9_1);
 8000410:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <GPIO_Config+0xf0>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b23      	ldr	r3, [pc, #140]	@ (80004a4 <GPIO_Config+0xf0>)
 8000416:	4924      	ldr	r1, [pc, #144]	@ (80004a8 <GPIO_Config+0xf4>)
 8000418:	400a      	ands	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
    /*set low speed (0b01)*/
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED9_0 ;
 800041c:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <GPIO_Config+0xf0>)
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	4b20      	ldr	r3, [pc, #128]	@ (80004a4 <GPIO_Config+0xf0>)
 8000422:	2180      	movs	r1, #128	@ 0x80
 8000424:	02c9      	lsls	r1, r1, #11
 8000426:	430a      	orrs	r2, r1
 8000428:	609a      	str	r2, [r3, #8]
    GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED9_1 ;
 800042a:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <GPIO_Config+0xf0>)
 800042c:	689a      	ldr	r2, [r3, #8]
 800042e:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <GPIO_Config+0xf0>)
 8000430:	491e      	ldr	r1, [pc, #120]	@ (80004ac <GPIO_Config+0xf8>)
 8000432:	400a      	ands	r2, r1
 8000434:	609a      	str	r2, [r3, #8]
    /*set Pull-up (0b01)*/
    GPIOB->PUPDR |= GPIO_PUPDR_PUPD9_0 ;
 8000436:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <GPIO_Config+0xf0>)
 8000438:	68da      	ldr	r2, [r3, #12]
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <GPIO_Config+0xf0>)
 800043c:	2180      	movs	r1, #128	@ 0x80
 800043e:	02c9      	lsls	r1, r1, #11
 8000440:	430a      	orrs	r2, r1
 8000442:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD9_1;
 8000444:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <GPIO_Config+0xf0>)
 8000446:	68da      	ldr	r2, [r3, #12]
 8000448:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <GPIO_Config+0xf0>)
 800044a:	4918      	ldr	r1, [pc, #96]	@ (80004ac <GPIO_Config+0xf8>)
 800044c:	400a      	ands	r2, r1
 800044e:	60da      	str	r2, [r3, #12]
    /*set EXTI for PB9 - 9(EXTI9) PB(0b01)*/
    EXTI->EXTICR[2] &= ~EXTI_EXTICR3_EXTI9 ; //clear
 8000450:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <GPIO_Config+0xfc>)
 8000452:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000454:	4b16      	ldr	r3, [pc, #88]	@ (80004b0 <GPIO_Config+0xfc>)
 8000456:	4917      	ldr	r1, [pc, #92]	@ (80004b4 <GPIO_Config+0x100>)
 8000458:	400a      	ands	r2, r1
 800045a:	669a      	str	r2, [r3, #104]	@ 0x68
    EXTI->EXTICR[2] |=  EXTI_EXTICR3_EXTI9_0 ; //set 0b01
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <GPIO_Config+0xfc>)
 800045e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000460:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <GPIO_Config+0xfc>)
 8000462:	2180      	movs	r1, #128	@ 0x80
 8000464:	0049      	lsls	r1, r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	669a      	str	r2, [r3, #104]	@ 0x68
    /*set EXTI Falling triger for Line no. 9 (PB9)*/
    EXTI->FTSR1 |= EXTI_FTSR1_FT9 ;
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <GPIO_Config+0xfc>)
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <GPIO_Config+0xfc>)
 8000470:	2180      	movs	r1, #128	@ 0x80
 8000472:	0089      	lsls	r1, r1, #2
 8000474:	430a      	orrs	r2, r1
 8000476:	605a      	str	r2, [r3, #4]
    /*set EXTI Interrupt no-masked for Line no.9 (PB9)*/
    EXTI->IMR1 |= EXTI_IMR1_IM9 ;
 8000478:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <GPIO_Config+0xfc>)
 800047a:	2380      	movs	r3, #128	@ 0x80
 800047c:	58d3      	ldr	r3, [r2, r3]
 800047e:	490c      	ldr	r1, [pc, #48]	@ (80004b0 <GPIO_Config+0xfc>)
 8000480:	2280      	movs	r2, #128	@ 0x80
 8000482:	0092      	lsls	r2, r2, #2
 8000484:	4313      	orrs	r3, r2
 8000486:	2280      	movs	r2, #128	@ 0x80
 8000488:	508b      	str	r3, [r1, r2]

         // 4. Habilitar a interrupção no NVIC
    NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	2007      	movs	r0, #7
 800048e:	f7ff fee1 	bl	8000254 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000492:	2007      	movs	r0, #7
 8000494:	f7ff fec4 	bl	8000220 <__NVIC_EnableIRQ>


}
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	40021000 	.word	0x40021000
 80004a4:	50000400 	.word	0x50000400
 80004a8:	fff3ffff 	.word	0xfff3ffff
 80004ac:	fff7ffff 	.word	0xfff7ffff
 80004b0:	40021800 	.word	0x40021800
 80004b4:	fffff8ff 	.word	0xfffff8ff

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//  HAL_Init();

  /* USER CODE BEGIN Init */
	  GPIO_Config();
 80004be:	f7ff ff79 	bl	80003b4 <GPIO_Config>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTaskTarefa_um */
  osThreadDef(myTaskTarefa_um, Tarefa_um, osPriorityNormal, 0, 128);
 80004c2:	2514      	movs	r5, #20
 80004c4:	197b      	adds	r3, r7, r5
 80004c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000504 <main+0x4c>)
 80004c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004ca:	c313      	stmia	r3!, {r0, r1, r4}
 80004cc:	ca03      	ldmia	r2!, {r0, r1}
 80004ce:	c303      	stmia	r3!, {r0, r1}
  myTaskTarefa_umHandle = osThreadCreate(osThread(myTaskTarefa_um), NULL);
 80004d0:	197b      	adds	r3, r7, r5
 80004d2:	2100      	movs	r1, #0
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 f8e8 	bl	80006aa <osThreadCreate>
 80004da:	0002      	movs	r2, r0
 80004dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <main+0x50>)
 80004de:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTaskTarefa_sa */
  osThreadDef(myTaskTarefa_sa, Tarefa_saida, osPriorityNormal, 0, 128);
 80004e0:	003b      	movs	r3, r7
 80004e2:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <main+0x54>)
 80004e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004e6:	c313      	stmia	r3!, {r0, r1, r4}
 80004e8:	ca03      	ldmia	r2!, {r0, r1}
 80004ea:	c303      	stmia	r3!, {r0, r1}
  myTaskTarefa_saHandle = osThreadCreate(osThread(myTaskTarefa_sa), NULL);
 80004ec:	003b      	movs	r3, r7
 80004ee:	2100      	movs	r1, #0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 f8da 	bl	80006aa <osThreadCreate>
 80004f6:	0002      	movs	r2, r0
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <main+0x58>)
 80004fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004fc:	f000 f8cd 	bl	800069a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	e7fd      	b.n	8000500 <main+0x48>
 8000504:	08001740 	.word	0x08001740
 8000508:	2000002c 	.word	0x2000002c
 800050c:	08001764 	.word	0x08001764
 8000510:	20000030 	.word	0x20000030

08000514 <Tarefa_um>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tarefa_um */
void Tarefa_um(void const * argument)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
		  GPIOA->ODR ^= LED2_PIN; // Toggle the LED state
 800051c:	23a0      	movs	r3, #160	@ 0xa0
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	23a0      	movs	r3, #160	@ 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2102      	movs	r1, #2
 8000528:	404a      	eors	r2, r1
 800052a:	615a      	str	r2, [r3, #20]

	    osDelay(500);
 800052c:	23fa      	movs	r3, #250	@ 0xfa
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	0018      	movs	r0, r3
 8000532:	f000 f8e2 	bl	80006fa <osDelay>
		  GPIOA->ODR ^= LED2_PIN; // Toggle the LED state
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	e7f0      	b.n	800051c <Tarefa_um+0x8>
	...

0800053c <Tarefa_saida>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa_saida */
void Tarefa_saida(void const * argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tarefa_saida */
  /* Infinite loop */
	atomic_store(&SAIDA_STATE, false); // Inicializa o estado como OFF
 8000544:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <Tarefa_saida+0x78>)
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	210f      	movs	r1, #15
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	187b      	adds	r3, r7, r1
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	001a      	movs	r2, r3
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	f3bf 8f5b 	dmb	ish
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	f3bf 8f5b 	dmb	ish
  for(;;)
  {
      if (atomic_load(&SAIDA_STATE)) {
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <Tarefa_saida+0x78>)
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	f3bf 8f5b 	dmb	ish
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f3bf 8f5b 	dmb	ish
 8000572:	b2db      	uxtb	r3, r3
 8000574:	001a      	movs	r2, r3
 8000576:	210e      	movs	r1, #14
 8000578:	187b      	adds	r3, r7, r1
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	187b      	adds	r3, r7, r1
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d008      	beq.n	8000596 <Tarefa_saida+0x5a>
    	  GPIOA->ODR |= LED1_PIN;
 8000584:	23a0      	movs	r3, #160	@ 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	23a0      	movs	r3, #160	@ 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2104      	movs	r1, #4
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	e007      	b.n	80005a6 <Tarefa_saida+0x6a>
		 } else {
			 GPIOA->ODR &= ~LED1_PIN;
 8000596:	23a0      	movs	r3, #160	@ 0xa0
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	23a0      	movs	r3, #160	@ 0xa0
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	2104      	movs	r1, #4
 80005a2:	438a      	bics	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]


		 }
		 osDelay(500);  // Atualiza a cada 1 segundo
 80005a6:	23fa      	movs	r3, #250	@ 0xfa
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8a5 	bl	80006fa <osDelay>
      if (atomic_load(&SAIDA_STATE)) {
 80005b0:	e7d7      	b.n	8000562 <Tarefa_saida+0x26>
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	20000028 	.word	0x20000028

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	e7fd      	b.n	80005bc <NMI_Handler+0x4>

080005c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	e7fd      	b.n	80005c4 <HardFault_Handler+0x4>

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f83a 	bl	8000644 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005d0:	f000 fd26 	bl	8001020 <xTaskGetSchedulerState>
 80005d4:	0003      	movs	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d001      	beq.n	80005de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005da:	f000 fe85 	bl	80012e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	@ (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f7ff fff6 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	@ (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	@ (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	@ (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061e:	f001 f857 	bl	80016d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000622:	f7ff ff49 	bl	80004b8 <main>

08000626 <LoopForever>:

LoopForever:
  b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000634:	08001788 	.word	0x08001788
  ldr r2, =_sbss
 8000638:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800063c:	20000d84 	.word	0x20000d84

08000640 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_IRQHandler>
	...

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	18d2      	adds	r2, r2, r3
 8000654:	4b03      	ldr	r3, [pc, #12]	@ (8000664 <HAL_IncTick+0x20>)
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	20000004 	.word	0x20000004
 8000664:	20000034 	.word	0x20000034

08000668 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	0002      	movs	r2, r0
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8000678:	1dbb      	adds	r3, r7, #6
 800067a:	2200      	movs	r2, #0
 800067c:	5e9b      	ldrsh	r3, [r3, r2]
 800067e:	2b84      	cmp	r3, #132	@ 0x84
 8000680:	d006      	beq.n	8000690 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8000682:	1dbb      	adds	r3, r7, #6
 8000684:	2200      	movs	r2, #0
 8000686:	5e9a      	ldrsh	r2, [r3, r2]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	18d3      	adds	r3, r2, r3
 800068c:	3303      	adds	r3, #3
 800068e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8000690:	68fb      	ldr	r3, [r7, #12]
}
 8000692:	0018      	movs	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	b004      	add	sp, #16
 8000698:	bd80      	pop	{r7, pc}

0800069a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800069e:	f000 fa3d 	bl	8000b1c <vTaskStartScheduler>
  
  return osOK;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80006aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ac:	b087      	sub	sp, #28
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685c      	ldr	r4, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006c0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2208      	movs	r2, #8
 80006c6:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff ffcd 	bl	8000668 <makeFreeRtosPriority>
 80006ce:	0001      	movs	r1, r0
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	230c      	movs	r3, #12
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	9100      	str	r1, [sp, #0]
 80006da:	0013      	movs	r3, r2
 80006dc:	0032      	movs	r2, r6
 80006de:	0029      	movs	r1, r5
 80006e0:	0020      	movs	r0, r4
 80006e2:	f000 f8c7 	bl	8000874 <xTaskCreate>
 80006e6:	0003      	movs	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d001      	beq.n	80006f0 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	e000      	b.n	80006f2 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80006f0:	68fb      	ldr	r3, [r7, #12]
}
 80006f2:	0018      	movs	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b005      	add	sp, #20
 80006f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <osDelay+0x16>
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	e000      	b.n	8000712 <osDelay+0x18>
 8000710:	2301      	movs	r3, #1
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f9dc 	bl	8000ad0 <vTaskDelay>
  
  return osOK;
 8000718:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b004      	add	sp, #16
 8000720:	bd80      	pop	{r7, pc}

08000722 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3308      	adds	r3, #8
 800072e:	001a      	movs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2201      	movs	r2, #1
 8000738:	4252      	negs	r2, r2
 800073a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3308      	adds	r3, #8
 8000740:	001a      	movs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3308      	adds	r3, #8
 800074a:	001a      	movs	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}

0800075e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}

08000774 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	3301      	adds	r3, #1
 80007cc:	d103      	bne.n	80007d6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e00c      	b.n	80007f0 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3308      	adds	r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e002      	b.n	80007e4 <vListInsert+0x2c>
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d2f6      	bcs.n	80007de <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b004      	add	sp, #16
 8000822:	bd80      	pop	{r7, pc}

08000824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	6892      	ldr	r2, [r2, #8]
 800083a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	6852      	ldr	r2, [r2, #4]
 8000844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	d103      	bne.n	8000858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1e5a      	subs	r2, r3, #1
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}

08000874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08d      	sub	sp, #52	@ 0x34
 8000878:	af04      	add	r7, sp, #16
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fd68 	bl	8001360 <pvPortMalloc>
 8000890:	0003      	movs	r3, r0
 8000892:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d010      	beq.n	80008bc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800089a:	2054      	movs	r0, #84	@ 0x54
 800089c:	f000 fd60 	bl	8001360 <pvPortMalloc>
 80008a0:	0003      	movs	r3, r0
 80008a2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80008b0:	e006      	b.n	80008c0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fe03 	bl	80014c0 <vPortFree>
 80008ba:	e001      	b.n	80008c0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d016      	beq.n	80008f4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80008c6:	1dbb      	adds	r3, r7, #6
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	683c      	ldr	r4, [r7, #0]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	2300      	movs	r3, #0
 80008d2:	9303      	str	r3, [sp, #12]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	0023      	movs	r3, r4
 80008e2:	f000 f80f 	bl	8000904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 f88d 	bl	8000a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	e002      	b.n	80008fa <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80008fa:	69bb      	ldr	r3, [r7, #24]
	}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b009      	add	sp, #36	@ 0x24
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	493a      	ldr	r1, [pc, #232]	@ (8000a04 <prvInitialiseNewTask+0x100>)
 800091a:	468c      	mov	ip, r1
 800091c:	4463      	add	r3, ip
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	2207      	movs	r2, #7
 8000928:	4393      	bics	r3, r2
 800092a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2207      	movs	r2, #7
 8000930:	4013      	ands	r3, r2
 8000932:	d002      	beq.n	800093a <prvInitialiseNewTask+0x36>
 8000934:	b672      	cpsid	i
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	e7fd      	b.n	8000936 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d020      	beq.n	8000982 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e013      	b.n	800096e <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	7818      	ldrb	r0, [r3, #0]
 800094e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000950:	2134      	movs	r1, #52	@ 0x34
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	185b      	adds	r3, r3, r1
 8000958:	1c02      	adds	r2, r0, #0
 800095a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d9e8      	bls.n	8000946 <prvInitialiseNewTask+0x42>
 8000974:	e000      	b.n	8000978 <prvInitialiseNewTask+0x74>
			{
				break;
 8000976:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097a:	2243      	movs	r2, #67	@ 0x43
 800097c:	2100      	movs	r1, #0
 800097e:	5499      	strb	r1, [r3, r2]
 8000980:	e003      	b.n	800098a <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000984:	2234      	movs	r2, #52	@ 0x34
 8000986:	2100      	movs	r1, #0
 8000988:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	2b06      	cmp	r3, #6
 800098e:	d901      	bls.n	8000994 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000990:	2306      	movs	r3, #6
 8000992:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000996:	6a3a      	ldr	r2, [r7, #32]
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800099a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800099c:	6a3a      	ldr	r2, [r7, #32]
 800099e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80009a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a2:	2200      	movs	r2, #0
 80009a4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a8:	3304      	adds	r3, #4
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff fed7 	bl	800075e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80009b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b2:	3318      	adds	r3, #24
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff fed2 	bl	800075e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80009ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	2207      	movs	r2, #7
 80009c4:	1ad2      	subs	r2, r2, r3
 80009c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80009ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80009d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d2:	2200      	movs	r2, #0
 80009d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80009d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d8:	2250      	movs	r2, #80	@ 0x50
 80009da:	2100      	movs	r1, #0
 80009dc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	68f9      	ldr	r1, [r7, #12]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fb8b 	bl	8001100 <pxPortInitialiseStack>
 80009ea:	0002      	movs	r2, r0
 80009ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b006      	add	sp, #24
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	3fffffff 	.word	0x3fffffff

08000a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000a10:	f000 fc0e 	bl	8001230 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <prvAddNewTaskToReadyList+0xb0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <prvAddNewTaskToReadyList+0xb0>)
 8000a1c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8000a1e:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <prvAddNewTaskToReadyList+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d109      	bne.n	8000a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000a26:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <prvAddNewTaskToReadyList+0xb4>)
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a2c:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <prvAddNewTaskToReadyList+0xb0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d110      	bne.n	8000a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000a34:	f000 fa52 	bl	8000edc <prvInitialiseTaskLists>
 8000a38:	e00d      	b.n	8000a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <prvAddNewTaskToReadyList+0xb8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d109      	bne.n	8000a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <prvAddNewTaskToReadyList+0xb4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d802      	bhi.n	8000a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <prvAddNewTaskToReadyList+0xb4>)
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <prvAddNewTaskToReadyList+0xbc>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <prvAddNewTaskToReadyList+0xbc>)
 8000a5e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <prvAddNewTaskToReadyList+0xc0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d903      	bls.n	8000a74 <prvAddNewTaskToReadyList+0x6c>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <prvAddNewTaskToReadyList+0xc0>)
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a78:	0013      	movs	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	189b      	adds	r3, r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <prvAddNewTaskToReadyList+0xc4>)
 8000a82:	189a      	adds	r2, r3, r2
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3304      	adds	r3, #4
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f7ff fe72 	bl	8000774 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000a90:	f000 fbe0 	bl	8001254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <prvAddNewTaskToReadyList+0xb8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d008      	beq.n	8000aae <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <prvAddNewTaskToReadyList+0xb4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d201      	bcs.n	8000aae <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000aaa:	f000 fbb1 	bl	8001210 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	20000138 	.word	0x20000138
 8000abc:	20000038 	.word	0x20000038
 8000ac0:	20000144 	.word	0x20000144
 8000ac4:	20000154 	.word	0x20000154
 8000ac8:	20000140 	.word	0x20000140
 8000acc:	2000003c 	.word	0x2000003c

08000ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d011      	beq.n	8000b06 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <vTaskDelay+0x48>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <vTaskDelay+0x20>
 8000aea:	b672      	cpsid	i
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	e7fd      	b.n	8000aec <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8000af0:	f000 f84a 	bl	8000b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2100      	movs	r1, #0
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 faad 	bl	8001058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000afe:	f000 f84f 	bl	8000ba0 <xTaskResumeAll>
 8000b02:	0003      	movs	r3, r0
 8000b04:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8000b0c:	f000 fb80 	bl	8001210 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000160 	.word	0x20000160

08000b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000b22:	4913      	ldr	r1, [pc, #76]	@ (8000b70 <vTaskStartScheduler+0x54>)
 8000b24:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <vTaskStartScheduler+0x58>)
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <vTaskStartScheduler+0x5c>)
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	f7ff fe9f 	bl	8000874 <xTaskCreate>
 8000b36:	0003      	movs	r3, r0
 8000b38:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10d      	bne.n	8000b5c <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8000b40:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <vTaskStartScheduler+0x60>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	4252      	negs	r2, r2
 8000b48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <vTaskStartScheduler+0x64>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <vTaskStartScheduler+0x68>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000b56:	f000 fb37 	bl	80011c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000b5a:	e005      	b.n	8000b68 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	d102      	bne.n	8000b68 <vTaskStartScheduler+0x4c>
 8000b62:	b672      	cpsid	i
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	e7fd      	b.n	8000b64 <vTaskStartScheduler+0x48>
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	08001778 	.word	0x08001778
 8000b74:	08000ebd 	.word	0x08000ebd
 8000b78:	2000015c 	.word	0x2000015c
 8000b7c:	20000158 	.word	0x20000158
 8000b80:	20000144 	.word	0x20000144
 8000b84:	2000013c 	.word	0x2000013c

08000b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <vTaskSuspendAll+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	4b02      	ldr	r3, [pc, #8]	@ (8000b9c <vTaskSuspendAll+0x14>)
 8000b94:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000160 	.word	0x20000160

08000ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000bae:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <xTaskResumeAll+0xf8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <xTaskResumeAll+0x1c>
 8000bb6:	b672      	cpsid	i
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	e7fd      	b.n	8000bb8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000bbc:	f000 fb38 	bl	8001230 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000bc0:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <xTaskResumeAll+0xf8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <xTaskResumeAll+0xf8>)
 8000bc8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bca:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <xTaskResumeAll+0xf8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d15b      	bne.n	8000c8a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000bd2:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <xTaskResumeAll+0xfc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d057      	beq.n	8000c8a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bda:	e02f      	b.n	8000c3c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bdc:	4b30      	ldr	r3, [pc, #192]	@ (8000ca0 <xTaskResumeAll+0x100>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3318      	adds	r3, #24
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fe1b 	bl	8000824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fe16 	bl	8000824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <xTaskResumeAll+0x104>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d903      	bls.n	8000c0c <xTaskResumeAll+0x6c>
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c08:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <xTaskResumeAll+0x104>)
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c10:	0013      	movs	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	189b      	adds	r3, r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <xTaskResumeAll+0x108>)
 8000c1a:	189a      	adds	r2, r3, r2
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	0019      	movs	r1, r3
 8000c22:	0010      	movs	r0, r2
 8000c24:	f7ff fda6 	bl	8000774 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <xTaskResumeAll+0x10c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d302      	bcc.n	8000c3c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <xTaskResumeAll+0x110>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <xTaskResumeAll+0x100>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1cb      	bne.n	8000bdc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000c4a:	f000 f9cb 	bl	8000fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <xTaskResumeAll+0x114>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00f      	beq.n	8000c7a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000c5a:	f000 f82d 	bl	8000cb8 <xTaskIncrementTick>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d002      	beq.n	8000c68 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <xTaskResumeAll+0x110>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f2      	bne.n	8000c5a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <xTaskResumeAll+0x114>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <xTaskResumeAll+0x110>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000c82:	2301      	movs	r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000c86:	f000 fac3 	bl	8001210 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000c8a:	f000 fae3 	bl	8001254 <vPortExitCritical>

	return xAlreadyYielded;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b004      	add	sp, #16
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000160 	.word	0x20000160
 8000c9c:	20000138 	.word	0x20000138
 8000ca0:	200000f8 	.word	0x200000f8
 8000ca4:	20000140 	.word	0x20000140
 8000ca8:	2000003c 	.word	0x2000003c
 8000cac:	20000038 	.word	0x20000038
 8000cb0:	2000014c 	.word	0x2000014c
 8000cb4:	20000148 	.word	0x20000148

08000cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <xTaskIncrementTick+0x134>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d000      	beq.n	8000ccc <xTaskIncrementTick+0x14>
 8000cca:	e085      	b.n	8000dd8 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000ccc:	4b48      	ldr	r3, [pc, #288]	@ (8000df0 <xTaskIncrementTick+0x138>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000cd4:	4b46      	ldr	r3, [pc, #280]	@ (8000df0 <xTaskIncrementTick+0x138>)
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d118      	bne.n	8000d12 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8000ce0:	4b44      	ldr	r3, [pc, #272]	@ (8000df4 <xTaskIncrementTick+0x13c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <xTaskIncrementTick+0x38>
 8000cea:	b672      	cpsid	i
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	e7fd      	b.n	8000cec <xTaskIncrementTick+0x34>
 8000cf0:	4b40      	ldr	r3, [pc, #256]	@ (8000df4 <xTaskIncrementTick+0x13c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b40      	ldr	r3, [pc, #256]	@ (8000df8 <xTaskIncrementTick+0x140>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000df4 <xTaskIncrementTick+0x13c>)
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000df8 <xTaskIncrementTick+0x140>)
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	4b3d      	ldr	r3, [pc, #244]	@ (8000dfc <xTaskIncrementTick+0x144>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000dfc <xTaskIncrementTick+0x144>)
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	f000 f969 	bl	8000fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000d12:	4b3b      	ldr	r3, [pc, #236]	@ (8000e00 <xTaskIncrementTick+0x148>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d349      	bcc.n	8000db0 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d1c:	4b35      	ldr	r3, [pc, #212]	@ (8000df4 <xTaskIncrementTick+0x13c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d26:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <xTaskIncrementTick+0x148>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4252      	negs	r2, r2
 8000d2c:	601a      	str	r2, [r3, #0]
					break;
 8000d2e:	e03f      	b.n	8000db0 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d30:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <xTaskIncrementTick+0x13c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d203      	bcs.n	8000d50 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <xTaskIncrementTick+0x148>)
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000d4e:	e02f      	b.n	8000db0 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	3304      	adds	r3, #4
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fd65 	bl	8000824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d004      	beq.n	8000d6c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3318      	adds	r3, #24
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fd5c 	bl	8000824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <xTaskIncrementTick+0x14c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d903      	bls.n	8000d80 <xTaskIncrementTick+0xc8>
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d7c:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <xTaskIncrementTick+0x14c>)
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d84:	0013      	movs	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	189b      	adds	r3, r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <xTaskIncrementTick+0x150>)
 8000d8e:	189a      	adds	r2, r3, r2
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3304      	adds	r3, #4
 8000d94:	0019      	movs	r1, r3
 8000d96:	0010      	movs	r0, r2
 8000d98:	f7ff fcec 	bl	8000774 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <xTaskIncrementTick+0x154>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3b8      	bcc.n	8000d1c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dae:	e7b5      	b.n	8000d1c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <xTaskIncrementTick+0x154>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000db6:	4914      	ldr	r1, [pc, #80]	@ (8000e08 <xTaskIncrementTick+0x150>)
 8000db8:	0013      	movs	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	189b      	adds	r3, r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	585b      	ldr	r3, [r3, r1]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d901      	bls.n	8000dca <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <xTaskIncrementTick+0x158>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e004      	b.n	8000de2 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <xTaskIncrementTick+0x15c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <xTaskIncrementTick+0x15c>)
 8000de0:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000de2:	697b      	ldr	r3, [r7, #20]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b006      	add	sp, #24
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000160 	.word	0x20000160
 8000df0:	2000013c 	.word	0x2000013c
 8000df4:	200000f0 	.word	0x200000f0
 8000df8:	200000f4 	.word	0x200000f4
 8000dfc:	20000150 	.word	0x20000150
 8000e00:	20000158 	.word	0x20000158
 8000e04:	20000140 	.word	0x20000140
 8000e08:	2000003c 	.word	0x2000003c
 8000e0c:	20000038 	.word	0x20000038
 8000e10:	2000014c 	.word	0x2000014c
 8000e14:	20000148 	.word	0x20000148

08000e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <vTaskSwitchContext+0x90>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <vTaskSwitchContext+0x94>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000e2c:	e038      	b.n	8000ea0 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <vTaskSwitchContext+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e34:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <vTaskSwitchContext+0x98>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e008      	b.n	8000e4e <vTaskSwitchContext+0x36>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <vTaskSwitchContext+0x30>
 8000e42:	b672      	cpsid	i
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	e7fd      	b.n	8000e44 <vTaskSwitchContext+0x2c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4919      	ldr	r1, [pc, #100]	@ (8000eb4 <vTaskSwitchContext+0x9c>)
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	0013      	movs	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	189b      	adds	r3, r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	585b      	ldr	r3, [r3, r1]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0ed      	beq.n	8000e3c <vTaskSwitchContext+0x24>
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	0013      	movs	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	189b      	adds	r3, r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <vTaskSwitchContext+0x9c>)
 8000e6c:	189b      	adds	r3, r3, r2
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	3308      	adds	r3, #8
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d104      	bne.n	8000e90 <vTaskSwitchContext+0x78>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <vTaskSwitchContext+0xa0>)
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <vTaskSwitchContext+0x98>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000160 	.word	0x20000160
 8000eac:	2000014c 	.word	0x2000014c
 8000eb0:	20000140 	.word	0x20000140
 8000eb4:	2000003c 	.word	0x2000003c
 8000eb8:	20000038 	.word	0x20000038

08000ebc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000ec4:	f000 f84e 	bl	8000f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <prvIdleTask+0x1c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d9f9      	bls.n	8000ec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8000ed0:	f000 f99e 	bl	8001210 <vPortYield>
		prvCheckTasksWaitingTermination();
 8000ed4:	e7f6      	b.n	8000ec4 <prvIdleTask+0x8>
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	2000003c 	.word	0x2000003c

08000edc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	e00c      	b.n	8000f02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	0013      	movs	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <prvInitialiseTaskLists+0x68>)
 8000ef4:	189b      	adds	r3, r3, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff fc13 	bl	8000722 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b06      	cmp	r3, #6
 8000f06:	d9ef      	bls.n	8000ee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <prvInitialiseTaskLists+0x6c>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff fc09 	bl	8000722 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <prvInitialiseTaskLists+0x70>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fc05 	bl	8000722 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <prvInitialiseTaskLists+0x74>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff fc01 	bl	8000722 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <prvInitialiseTaskLists+0x78>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff fbfd 	bl	8000722 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <prvInitialiseTaskLists+0x7c>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff fbf9 	bl	8000722 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <prvInitialiseTaskLists+0x80>)
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <prvInitialiseTaskLists+0x6c>)
 8000f34:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <prvInitialiseTaskLists+0x84>)
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <prvInitialiseTaskLists+0x70>)
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000003c 	.word	0x2000003c
 8000f48:	200000c8 	.word	0x200000c8
 8000f4c:	200000dc 	.word	0x200000dc
 8000f50:	200000f8 	.word	0x200000f8
 8000f54:	2000010c 	.word	0x2000010c
 8000f58:	20000124 	.word	0x20000124
 8000f5c:	200000f0 	.word	0x200000f0
 8000f60:	200000f4 	.word	0x200000f4

08000f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f6a:	e01a      	b.n	8000fa2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8000f6c:	f000 f960 	bl	8001230 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <prvCheckTasksWaitingTermination+0x50>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff fc51 	bl	8000824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <prvCheckTasksWaitingTermination+0x54>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <prvCheckTasksWaitingTermination+0x54>)
 8000f8a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <prvCheckTasksWaitingTermination+0x58>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1e5a      	subs	r2, r3, #1
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <prvCheckTasksWaitingTermination+0x58>)
 8000f94:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8000f96:	f000 f95d 	bl	8001254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 f80f 	bl	8000fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <prvCheckTasksWaitingTermination+0x58>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1e0      	bne.n	8000f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000010c 	.word	0x2000010c
 8000fb8:	20000138 	.word	0x20000138
 8000fbc:	20000120 	.word	0x20000120

08000fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 fa77 	bl	80014c0 <vPortFree>
			vPortFree( pxTCB );
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fa73 	bl	80014c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <prvResetNextTaskUnblockTime+0x34>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d104      	bne.n	8000ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <prvResetNextTaskUnblockTime+0x38>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4252      	negs	r2, r2
 8000ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000ffc:	e008      	b.n	8001010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <prvResetNextTaskUnblockTime+0x34>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <prvResetNextTaskUnblockTime+0x38>)
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000f0 	.word	0x200000f0
 800101c:	20000158 	.word	0x20000158

08001020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <xTaskGetSchedulerState+0x30>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800102e:	2301      	movs	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e008      	b.n	8001046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <xTaskGetSchedulerState+0x34>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800103c:	2302      	movs	r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	e001      	b.n	8001046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001046:	687b      	ldr	r3, [r7, #4]
	}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000144 	.word	0x20000144
 8001054:	20000160 	.word	0x20000160

08001058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <prvAddCurrentTaskToDelayedList+0x94>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3304      	adds	r3, #4
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff fbd8 	bl	8000824 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3301      	adds	r3, #1
 8001078:	d10b      	bne.n	8001092 <prvAddCurrentTaskToDelayedList+0x3a>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <prvAddCurrentTaskToDelayedList+0x94>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1d1a      	adds	r2, r3, #4
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <prvAddCurrentTaskToDelayedList+0x98>)
 8001088:	0011      	movs	r1, r2
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff fb72 	bl	8000774 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001090:	e026      	b.n	80010e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	18d3      	adds	r3, r2, r3
 8001098:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <prvAddCurrentTaskToDelayedList+0x94>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d209      	bcs.n	80010be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <prvAddCurrentTaskToDelayedList+0x94>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3304      	adds	r3, #4
 80010b4:	0019      	movs	r1, r3
 80010b6:	0010      	movs	r0, r2
 80010b8:	f7ff fb7e 	bl	80007b8 <vListInsert>
}
 80010bc:	e010      	b.n	80010e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <prvAddCurrentTaskToDelayedList+0x94>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3304      	adds	r3, #4
 80010c8:	0019      	movs	r1, r3
 80010ca:	0010      	movs	r0, r2
 80010cc:	f7ff fb74 	bl	80007b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d202      	bcs.n	80010e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b004      	add	sp, #16
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000013c 	.word	0x2000013c
 80010ec:	20000038 	.word	0x20000038
 80010f0:	20000124 	.word	0x20000124
 80010f4:	200000f4 	.word	0x200000f4
 80010f8:	200000f0 	.word	0x200000f0
 80010fc:	20000158 	.word	0x20000158

08001100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3b04      	subs	r3, #4
 8001110:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	0452      	lsls	r2, r2, #17
 8001118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b04      	subs	r3, #4
 800111e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3b04      	subs	r3, #4
 800112a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800112c:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <pxPortInitialiseStack+0x50>)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3b14      	subs	r3, #20
 8001136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3b20      	subs	r3, #32
 8001142:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001144:	68fb      	ldr	r3, [r7, #12]
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b004      	add	sp, #16
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	08001155 	.word	0x08001155

08001154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <prvTaskExitError+0x2c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	d002      	beq.n	800116c <prvTaskExitError+0x18>
 8001166:	b672      	cpsid	i
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	e7fd      	b.n	8001168 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800116c:	b672      	cpsid	i
	while( ulDummy == 0 )
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0fc      	beq.n	8001170 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008

08001184 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <pxCurrentTCBConst2>)
 8001192:	6813      	ldr	r3, [r2, #0]
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	3020      	adds	r0, #32
 8001198:	f380 8809 	msr	PSP, r0
 800119c:	2002      	movs	r0, #2
 800119e:	f380 8814 	msr	CONTROL, r0
 80011a2:	f3bf 8f6f 	isb	sy
 80011a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80011a8:	46ae      	mov	lr, r5
 80011aa:	bc08      	pop	{r3}
 80011ac:	bc04      	pop	{r2}
 80011ae:	b662      	cpsie	i
 80011b0:	4718      	bx	r3
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46c0      	nop			@ (mov r8, r8)

080011c0 <pxCurrentTCBConst2>:
 80011c0:	20000038 	.word	0x20000038
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46c0      	nop			@ (mov r8, r8)

080011c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <xPortStartScheduler+0x40>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <xPortStartScheduler+0x40>)
 80011d2:	21ff      	movs	r1, #255	@ 0xff
 80011d4:	0409      	lsls	r1, r1, #16
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <xPortStartScheduler+0x40>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <xPortStartScheduler+0x40>)
 80011e0:	21ff      	movs	r1, #255	@ 0xff
 80011e2:	0609      	lsls	r1, r1, #24
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80011e8:	f000 f898 	bl	800131c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <xPortStartScheduler+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80011f2:	f7ff ffcd 	bl	8001190 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80011f6:	f7ff fe0f 	bl	8000e18 <vTaskSwitchContext>
	prvTaskExitError();
 80011fa:	f7ff ffab 	bl	8001154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	e000ed20 	.word	0xe000ed20
 800120c:	20000008 	.word	0x20000008

08001210 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <vPortYield+0x1c>)
 8001216:	2280      	movs	r2, #128	@ 0x80
 8001218:	0552      	lsls	r2, r2, #21
 800121a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800121c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001220:	f3bf 8f6f 	isb	sy
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	e000ed04 	.word	0xe000ed04

08001230 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001234:	b672      	cpsid	i
	uxCriticalNesting++;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <vPortEnterCritical+0x20>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <vPortEnterCritical+0x20>)
 800123e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8001240:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001244:	f3bf 8f6f 	isb	sy
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	20000008 	.word	0x20000008

08001254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <vPortExitCritical+0x2c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <vPortExitCritical+0x12>
 8001260:	b672      	cpsid	i
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	e7fd      	b.n	8001262 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <vPortExitCritical+0x2c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <vPortExitCritical+0x2c>)
 800126e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <vPortExitCritical+0x2c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d100      	bne.n	800127a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8001278:	b662      	cpsie	i
	}
}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8001284:	f3ef 8010 	mrs	r0, PRIMASK
 8001288:	b672      	cpsid	i
 800128a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800128c:	46c0      	nop			@ (mov r8, r8)
 800128e:	0018      	movs	r0, r3

08001290 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8001290:	f380 8810 	msr	PRIMASK, r0
 8001294:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8001296:	46c0      	nop			@ (mov r8, r8)
	...

080012a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80012a0:	f3ef 8009 	mrs	r0, PSP
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <pxCurrentTCBConst>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	3820      	subs	r0, #32
 80012aa:	6010      	str	r0, [r2, #0]
 80012ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80012ae:	4644      	mov	r4, r8
 80012b0:	464d      	mov	r5, r9
 80012b2:	4656      	mov	r6, sl
 80012b4:	465f      	mov	r7, fp
 80012b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80012b8:	b508      	push	{r3, lr}
 80012ba:	b672      	cpsid	i
 80012bc:	f7ff fdac 	bl	8000e18 <vTaskSwitchContext>
 80012c0:	b662      	cpsie	i
 80012c2:	bc0c      	pop	{r2, r3}
 80012c4:	6811      	ldr	r1, [r2, #0]
 80012c6:	6808      	ldr	r0, [r1, #0]
 80012c8:	3010      	adds	r0, #16
 80012ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80012cc:	46a0      	mov	r8, r4
 80012ce:	46a9      	mov	r9, r5
 80012d0:	46b2      	mov	sl, r6
 80012d2:	46bb      	mov	fp, r7
 80012d4:	f380 8809 	msr	PSP, r0
 80012d8:	3820      	subs	r0, #32
 80012da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80012dc:	4718      	bx	r3
 80012de:	46c0      	nop			@ (mov r8, r8)

080012e0 <pxCurrentTCBConst>:
 80012e0:	20000038 	.word	0x20000038
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46c0      	nop			@ (mov r8, r8)

080012e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80012ee:	f7ff ffc9 	bl	8001284 <ulSetInterruptMaskFromISR>
 80012f2:	0003      	movs	r3, r0
 80012f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80012f6:	f7ff fcdf 	bl	8000cb8 <xTaskIncrementTick>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d003      	beq.n	8001306 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <xPortSysTickHandler+0x30>)
 8001300:	2280      	movs	r2, #128	@ 0x80
 8001302:	0552      	lsls	r2, r2, #21
 8001304:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ffc1 	bl	8001290 <vClearInterruptMaskFromISR>
}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	e000ed04 	.word	0xe000ed04

0800131c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <vPortSetupTimerInterrupt+0x34>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <vPortSetupTimerInterrupt+0x38>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <vPortSetupTimerInterrupt+0x3c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	22fa      	movs	r2, #250	@ 0xfa
 8001332:	0091      	lsls	r1, r2, #2
 8001334:	0018      	movs	r0, r3
 8001336:	f7fe fee7 	bl	8000108 <__udivsi3>
 800133a:	0003      	movs	r3, r0
 800133c:	001a      	movs	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <vPortSetupTimerInterrupt+0x40>)
 8001340:	3a01      	subs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8001344:	4b02      	ldr	r3, [pc, #8]	@ (8001350 <vPortSetupTimerInterrupt+0x34>)
 8001346:	2207      	movs	r2, #7
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	e000e010 	.word	0xe000e010
 8001354:	e000e018 	.word	0xe000e018
 8001358:	20000000 	.word	0x20000000
 800135c:	e000e014 	.word	0xe000e014

08001360 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800136c:	f7ff fc0c 	bl	8000b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001370:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <pvPortMalloc+0x148>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001378:	f000 f8f2 	bl	8001560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800137c:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <pvPortMalloc+0x14c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4013      	ands	r3, r2
 8001384:	d000      	beq.n	8001388 <pvPortMalloc+0x28>
 8001386:	e080      	b.n	800148a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d013      	beq.n	80013b6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800138e:	2208      	movs	r2, #8
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	189b      	adds	r3, r3, r2
 8001394:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2207      	movs	r2, #7
 800139a:	4013      	ands	r3, r2
 800139c:	d00b      	beq.n	80013b6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2207      	movs	r2, #7
 80013a2:	4393      	bics	r3, r2
 80013a4:	3308      	adds	r3, #8
 80013a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2207      	movs	r2, #7
 80013ac:	4013      	ands	r3, r2
 80013ae:	d002      	beq.n	80013b6 <pvPortMalloc+0x56>
 80013b0:	b672      	cpsid	i
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	e7fd      	b.n	80013b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d066      	beq.n	800148a <pvPortMalloc+0x12a>
 80013bc:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <pvPortMalloc+0x150>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d861      	bhi.n	800148a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80013c6:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <pvPortMalloc+0x154>)
 80013c8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80013ca:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <pvPortMalloc+0x154>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013d0:	e004      	b.n	80013dc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d903      	bls.n	80013ee <pvPortMalloc+0x8e>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f1      	bne.n	80013d2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80013ee:	4b2e      	ldr	r3, [pc, #184]	@ (80014a8 <pvPortMalloc+0x148>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d048      	beq.n	800148a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2208      	movs	r2, #8
 80013fe:	189b      	adds	r3, r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	2308      	movs	r3, #8
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	429a      	cmp	r2, r3
 8001418:	d917      	bls.n	800144a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	18d3      	adds	r3, r2, r3
 8001420:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2207      	movs	r2, #7
 8001426:	4013      	ands	r3, r2
 8001428:	d002      	beq.n	8001430 <pvPortMalloc+0xd0>
 800142a:	b672      	cpsid	i
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	e7fd      	b.n	800142c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	1ad2      	subs	r2, r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	0018      	movs	r0, r3
 8001446:	f000 f8eb 	bl	8001620 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800144a:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <pvPortMalloc+0x150>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	1ad2      	subs	r2, r2, r3
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <pvPortMalloc+0x150>)
 8001456:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <pvPortMalloc+0x150>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <pvPortMalloc+0x158>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d203      	bcs.n	800146c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <pvPortMalloc+0x150>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <pvPortMalloc+0x158>)
 800146a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <pvPortMalloc+0x14c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001480:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <pvPortMalloc+0x15c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <pvPortMalloc+0x15c>)
 8001488:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800148a:	f7ff fb89 	bl	8000ba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2207      	movs	r2, #7
 8001492:	4013      	ands	r3, r2
 8001494:	d002      	beq.n	800149c <pvPortMalloc+0x13c>
 8001496:	b672      	cpsid	i
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	e7fd      	b.n	8001498 <pvPortMalloc+0x138>
	return pvReturn;
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b006      	add	sp, #24
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	20000d6c 	.word	0x20000d6c
 80014ac:	20000d80 	.word	0x20000d80
 80014b0:	20000d70 	.word	0x20000d70
 80014b4:	20000d64 	.word	0x20000d64
 80014b8:	20000d74 	.word	0x20000d74
 80014bc:	20000d78 	.word	0x20000d78

080014c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03c      	beq.n	800154c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80014d2:	2308      	movs	r3, #8
 80014d4:	425b      	negs	r3, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <vPortFree+0x94>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4013      	ands	r3, r2
 80014ea:	d102      	bne.n	80014f2 <vPortFree+0x32>
 80014ec:	b672      	cpsid	i
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	e7fd      	b.n	80014ee <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <vPortFree+0x40>
 80014fa:	b672      	cpsid	i
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	e7fd      	b.n	80014fc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <vPortFree+0x94>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4013      	ands	r3, r2
 800150a:	d01f      	beq.n	800154c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11b      	bne.n	800154c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <vPortFree+0x94>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	43db      	mvns	r3, r3
 800151e:	401a      	ands	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001524:	f7ff fb30 	bl	8000b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <vPortFree+0x98>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	18d2      	adds	r2, r2, r3
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <vPortFree+0x98>)
 8001534:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	0018      	movs	r0, r3
 800153a:	f000 f871 	bl	8001620 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <vPortFree+0x9c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <vPortFree+0x9c>)
 8001546:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8001548:	f7ff fb2a 	bl	8000ba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800154c:	46c0      	nop			@ (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000d80 	.word	0x20000d80
 8001558:	20000d70 	.word	0x20000d70
 800155c:	20000d7c 	.word	0x20000d7c

08001560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001566:	23c0      	movs	r3, #192	@ 0xc0
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800156c:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <prvHeapInit+0xa8>)
 800156e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	d00c      	beq.n	8001592 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3307      	adds	r3, #7
 800157c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2207      	movs	r2, #7
 8001582:	4393      	bics	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1ad2      	subs	r2, r2, r3
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <prvHeapInit+0xa8>)
 800158e:	18d3      	adds	r3, r2, r3
 8001590:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <prvHeapInit+0xac>)
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <prvHeapInit+0xac>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	18d3      	adds	r3, r2, r3
 80015a8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80015aa:	2208      	movs	r2, #8
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2207      	movs	r2, #7
 80015b6:	4393      	bics	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <prvHeapInit+0xb0>)
 80015be:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <prvHeapInit+0xb0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <prvHeapInit+0xb0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <prvHeapInit+0xb0>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <prvHeapInit+0xb4>)
 80015ec:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <prvHeapInit+0xb8>)
 80015f4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <prvHeapInit+0xbc>)
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	0612      	lsls	r2, r2, #24
 80015fc:	601a      	str	r2, [r3, #0]
}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	20000164 	.word	0x20000164
 800160c:	20000d64 	.word	0x20000d64
 8001610:	20000d6c 	.word	0x20000d6c
 8001614:	20000d74 	.word	0x20000d74
 8001618:	20000d70 	.word	0x20000d70
 800161c:	20000d80 	.word	0x20000d80

08001620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001628:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <prvInsertBlockIntoFreeList+0xa8>)
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e002      	b.n	8001634 <prvInsertBlockIntoFreeList+0x14>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d8f7      	bhi.n	800162e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d108      	bne.n	8001662 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	18d2      	adds	r2, r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	18d2      	adds	r2, r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d118      	bne.n	80016a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <prvInsertBlockIntoFreeList+0xac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d00d      	beq.n	800169e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	18d2      	adds	r2, r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e008      	b.n	80016b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <prvInsertBlockIntoFreeList+0xac>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e003      	b.n	80016b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d002      	beq.n	80016be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	20000d64 	.word	0x20000d64
 80016cc:	20000d6c 	.word	0x20000d6c

080016d0 <__libc_init_array>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	2600      	movs	r6, #0
 80016d4:	4c0c      	ldr	r4, [pc, #48]	@ (8001708 <__libc_init_array+0x38>)
 80016d6:	4d0d      	ldr	r5, [pc, #52]	@ (800170c <__libc_init_array+0x3c>)
 80016d8:	1b64      	subs	r4, r4, r5
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	42a6      	cmp	r6, r4
 80016de:	d109      	bne.n	80016f4 <__libc_init_array+0x24>
 80016e0:	2600      	movs	r6, #0
 80016e2:	f000 f819 	bl	8001718 <_init>
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <__libc_init_array+0x40>)
 80016e8:	4d0a      	ldr	r5, [pc, #40]	@ (8001714 <__libc_init_array+0x44>)
 80016ea:	1b64      	subs	r4, r4, r5
 80016ec:	10a4      	asrs	r4, r4, #2
 80016ee:	42a6      	cmp	r6, r4
 80016f0:	d105      	bne.n	80016fe <__libc_init_array+0x2e>
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	00b3      	lsls	r3, r6, #2
 80016f6:	58eb      	ldr	r3, [r5, r3]
 80016f8:	4798      	blx	r3
 80016fa:	3601      	adds	r6, #1
 80016fc:	e7ee      	b.n	80016dc <__libc_init_array+0xc>
 80016fe:	00b3      	lsls	r3, r6, #2
 8001700:	58eb      	ldr	r3, [r5, r3]
 8001702:	4798      	blx	r3
 8001704:	3601      	adds	r6, #1
 8001706:	e7f2      	b.n	80016ee <__libc_init_array+0x1e>
 8001708:	08001780 	.word	0x08001780
 800170c:	08001780 	.word	0x08001780
 8001710:	08001784 	.word	0x08001784
 8001714:	08001780 	.word	0x08001780

08001718 <_init>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171e:	bc08      	pop	{r3}
 8001720:	469e      	mov	lr, r3
 8001722:	4770      	bx	lr

08001724 <_fini>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr
