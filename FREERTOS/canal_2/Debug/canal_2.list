
canal_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f4  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080022b4  080022b4  000032b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002330  08002330  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002330  08002330  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002330  08002330  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002330  08002330  00003330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002334  08002334  00003334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002338  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  2000000c  08002344  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d90  08002344  00004d90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059fb  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c0  00000000  00000000  00009a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000586  00000000  00000000  0000b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001746  00000000  00000000  0000bbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077de  00000000  00000000  0000d31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847a4  00000000  00000000  00014afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009929e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001938  00000000  00000000  000992e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0009ac1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800229c 	.word	0x0800229c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800229c 	.word	0x0800229c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <GPIO_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GPIO_Config(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    // Habilita o clock do GPIO A
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000224:	4b1c      	ldr	r3, [pc, #112]	@ (8000298 <GPIO_Config+0x78>)
 8000226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000228:	4b1b      	ldr	r3, [pc, #108]	@ (8000298 <GPIO_Config+0x78>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	635a      	str	r2, [r3, #52]	@ 0x34



    GPIOA->MODER &= ~(0x3 << (1 * 2));  // Limpa os bits de modo para PA1
 8000230:	23a0      	movs	r3, #160	@ 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	23a0      	movs	r3, #160	@ 0xa0
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	210c      	movs	r1, #12
 800023c:	438a      	bics	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0x1 << (1 * 2));   // Configura PA1 como saída
 8000240:	23a0      	movs	r3, #160	@ 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	23a0      	movs	r3, #160	@ 0xa0
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2104      	movs	r1, #4
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]

    GPIOA->MODER &= ~(0x3 << (2 * 2));  // Limpa os bits de modo para PA2
 8000250:	23a0      	movs	r3, #160	@ 0xa0
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	23a0      	movs	r3, #160	@ 0xa0
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	2130      	movs	r1, #48	@ 0x30
 800025c:	438a      	bics	r2, r1
 800025e:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0x1 << (2 * 2));   // Configura PA2 como saída
 8000260:	23a0      	movs	r3, #160	@ 0xa0
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	23a0      	movs	r3, #160	@ 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2110      	movs	r1, #16
 800026c:	430a      	orrs	r2, r1
 800026e:	601a      	str	r2, [r3, #0]

    GPIOA->MODER &= ~(0x3 << (3 * 2));  // Limpa os bits de modo para PA3
 8000270:	23a0      	movs	r3, #160	@ 0xa0
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	23a0      	movs	r3, #160	@ 0xa0
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	21c0      	movs	r1, #192	@ 0xc0
 800027c:	438a      	bics	r2, r1
 800027e:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (0x1 << (3 * 2));   // Configura PA3 como saída
 8000280:	23a0      	movs	r3, #160	@ 0xa0
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	23a0      	movs	r3, #160	@ 0xa0
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2140      	movs	r1, #64	@ 0x40
 800028c:	430a      	orrs	r2, r1
 800028e:	601a      	str	r2, [r3, #0]


}
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	40021000 	.word	0x40021000

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b5b0      	push	{r4, r5, r7, lr}
 800029e:	b096      	sub	sp, #88	@ 0x58
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	GPIO_Config();
 80002a2:	f7ff ffbd 	bl	8000220 <GPIO_Config>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueFila1 */
  osMessageQDef(myQueueFila1, 2, uint16_t);
 80002a6:	2450      	movs	r4, #80	@ 0x50
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000354 <main+0xb8>)
 80002ac:	ca03      	ldmia	r2!, {r0, r1}
 80002ae:	c303      	stmia	r3!, {r0, r1}
  myQueueFila1Handle = osMessageCreate(osMessageQ(myQueueFila1), NULL);
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2100      	movs	r1, #0
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 f9c2 	bl	800063e <osMessageCreate>
 80002ba:	0002      	movs	r2, r0
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <main+0xbc>)
 80002be:	601a      	str	r2, [r3, #0]

  /* definition and creation of myQueueFila2 */
  osMessageQDef(myQueueFila2, 2, uint16_t);
 80002c0:	2448      	movs	r4, #72	@ 0x48
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	4a23      	ldr	r2, [pc, #140]	@ (8000354 <main+0xb8>)
 80002c6:	ca03      	ldmia	r2!, {r0, r1}
 80002c8:	c303      	stmia	r3!, {r0, r1}
  myQueueFila2Handle = osMessageCreate(osMessageQ(myQueueFila2), NULL);
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2100      	movs	r1, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 f9b5 	bl	800063e <osMessageCreate>
 80002d4:	0002      	movs	r2, r0
 80002d6:	4b21      	ldr	r3, [pc, #132]	@ (800035c <main+0xc0>)
 80002d8:	601a      	str	r2, [r3, #0]

  /* definition and creation of myQueueFila3 */
  osMessageQDef(myQueueFila3, 2, uint16_t);
 80002da:	2440      	movs	r4, #64	@ 0x40
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	4a1d      	ldr	r2, [pc, #116]	@ (8000354 <main+0xb8>)
 80002e0:	ca03      	ldmia	r2!, {r0, r1}
 80002e2:	c303      	stmia	r3!, {r0, r1}
  myQueueFila3Handle = osMessageCreate(osMessageQ(myQueueFila3), NULL);
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2100      	movs	r1, #0
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 f9a8 	bl	800063e <osMessageCreate>
 80002ee:	0002      	movs	r2, r0
 80002f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000360 <main+0xc4>)
 80002f2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTaskTarefa_um */
  osThreadDef(myTaskTarefa_um, Tarefa_um, osPriorityNormal, 0, 128);
 80002f4:	252c      	movs	r5, #44	@ 0x2c
 80002f6:	197b      	adds	r3, r7, r5
 80002f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000364 <main+0xc8>)
 80002fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002fc:	c313      	stmia	r3!, {r0, r1, r4}
 80002fe:	ca03      	ldmia	r2!, {r0, r1}
 8000300:	c303      	stmia	r3!, {r0, r1}
  myTaskTarefa_umHandle = osThreadCreate(osThread(myTaskTarefa_um), NULL);
 8000302:	197b      	adds	r3, r7, r5
 8000304:	2100      	movs	r1, #0
 8000306:	0018      	movs	r0, r3
 8000308:	f000 f95d 	bl	80005c6 <osThreadCreate>
 800030c:	0002      	movs	r2, r0
 800030e:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <main+0xcc>)
 8000310:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTaskTarefa_do */
  osThreadDef(myTaskTarefa_do, Tarefa_dois, osPriorityIdle, 0, 128);
 8000312:	2518      	movs	r5, #24
 8000314:	197b      	adds	r3, r7, r5
 8000316:	4a15      	ldr	r2, [pc, #84]	@ (800036c <main+0xd0>)
 8000318:	ca13      	ldmia	r2!, {r0, r1, r4}
 800031a:	c313      	stmia	r3!, {r0, r1, r4}
 800031c:	ca03      	ldmia	r2!, {r0, r1}
 800031e:	c303      	stmia	r3!, {r0, r1}
  myTaskTarefa_doHandle = osThreadCreate(osThread(myTaskTarefa_do), NULL);
 8000320:	197b      	adds	r3, r7, r5
 8000322:	2100      	movs	r1, #0
 8000324:	0018      	movs	r0, r3
 8000326:	f000 f94e 	bl	80005c6 <osThreadCreate>
 800032a:	0002      	movs	r2, r0
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <main+0xd4>)
 800032e:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTaskTarefa_tr */
  osThreadDef(myTaskTarefa_tr, Tarefa_tres, osPriorityIdle, 0, 128);
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4a10      	ldr	r2, [pc, #64]	@ (8000374 <main+0xd8>)
 8000334:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000336:	c313      	stmia	r3!, {r0, r1, r4}
 8000338:	ca03      	ldmia	r2!, {r0, r1}
 800033a:	c303      	stmia	r3!, {r0, r1}
  myTaskTarefa_trHandle = osThreadCreate(osThread(myTaskTarefa_tr), NULL);
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2100      	movs	r1, #0
 8000340:	0018      	movs	r0, r3
 8000342:	f000 f940 	bl	80005c6 <osThreadCreate>
 8000346:	0002      	movs	r2, r0
 8000348:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <main+0xdc>)
 800034a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800034c:	f000 f933 	bl	80005b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	e7fd      	b.n	8000350 <main+0xb4>
 8000354:	080022b4 	.word	0x080022b4
 8000358:	20000034 	.word	0x20000034
 800035c:	20000038 	.word	0x20000038
 8000360:	2000003c 	.word	0x2000003c
 8000364:	080022cc 	.word	0x080022cc
 8000368:	20000028 	.word	0x20000028
 800036c:	080022f0 	.word	0x080022f0
 8000370:	2000002c 	.word	0x2000002c
 8000374:	08002314 	.word	0x08002314
 8000378:	20000030 	.word	0x20000030

0800037c <Tarefa_um>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tarefa_um */
void Tarefa_um(void const * argument)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int value =0;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  value = (value == 1) ? 0 : 1;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b01      	subs	r3, #1
 800038c:	1e5a      	subs	r2, r3, #1
 800038e:	4193      	sbcs	r3, r2
 8000390:	b2db      	uxtb	r3, r3
 8000392:	60fb      	str	r3, [r7, #12]
		  if(value == 0){
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d108      	bne.n	80003ac <Tarefa_um+0x30>
			  GPIOA->ODR |= LED1_PIN;
 800039a:	23a0      	movs	r3, #160	@ 0xa0
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	23a0      	movs	r3, #160	@ 0xa0
 80003a2:	05db      	lsls	r3, r3, #23
 80003a4:	2102      	movs	r1, #2
 80003a6:	430a      	orrs	r2, r1
 80003a8:	615a      	str	r2, [r3, #20]
 80003aa:	e007      	b.n	80003bc <Tarefa_um+0x40>
		  }else{
			  GPIOA->ODR &= ~LED1_PIN;
 80003ac:	23a0      	movs	r3, #160	@ 0xa0
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	23a0      	movs	r3, #160	@ 0xa0
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	2102      	movs	r1, #2
 80003b8:	438a      	bics	r2, r1
 80003ba:	615a      	str	r2, [r3, #20]
		  }

		  osMessagePut(myQueueFila1Handle, value, osWaitForever);
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <Tarefa_um+0x5c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	68f9      	ldr	r1, [r7, #12]
 80003c2:	2201      	movs	r2, #1
 80003c4:	4252      	negs	r2, r2
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 f94c 	bl	8000664 <osMessagePut>
	    osDelay(900);
 80003cc:	23e1      	movs	r3, #225	@ 0xe1
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 f920 	bl	8000616 <osDelay>
	  value = (value == 1) ? 0 : 1;
 80003d6:	e7d7      	b.n	8000388 <Tarefa_um+0xc>
 80003d8:	20000034 	.word	0x20000034

080003dc <Tarefa_dois>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa_dois */
void Tarefa_dois(void const * argument)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tarefa_dois */
	/*infinite loop*/
	   osEvent event;
	for(;;)
	{
	  event = osMessageGet(myQueueFila1Handle, osWaitForever);
 80003e4:	4b19      	ldr	r3, [pc, #100]	@ (800044c <Tarefa_dois+0x70>)
 80003e6:	6819      	ldr	r1, [r3, #0]
 80003e8:	2408      	movs	r4, #8
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	2201      	movs	r2, #1
 80003ee:	4252      	negs	r2, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 f973 	bl	80006dc <osMessageGet>
	 	  if (event.status == osEventMessage) {
 80003f6:	0022      	movs	r2, r4
 80003f8:	18bb      	adds	r3, r7, r2
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b10      	cmp	r3, #16
 80003fe:	d11e      	bne.n	800043e <Tarefa_dois+0x62>
	 	    int valueR = event.value.v;
 8000400:	18bb      	adds	r3, r7, r2
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	617b      	str	r3, [r7, #20]
	 	    if (valueR == 0) {
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d108      	bne.n	800041e <Tarefa_dois+0x42>

	 	    GPIOA->ODR |= LED2_PIN;
 800040c:	23a0      	movs	r3, #160	@ 0xa0
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	23a0      	movs	r3, #160	@ 0xa0
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	2104      	movs	r1, #4
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e007      	b.n	800042e <Tarefa_dois+0x52>

	 	    } else {
	 	    GPIOA->ODR &= ~LED2_PIN;
 800041e:	23a0      	movs	r3, #160	@ 0xa0
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	23a0      	movs	r3, #160	@ 0xa0
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	2104      	movs	r1, #4
 800042a:	438a      	bics	r2, r1
 800042c:	615a      	str	r2, [r3, #20]

	 	    }
	 	    osMessagePut(myQueueFila2Handle, valueR, osWaitForever);
 800042e:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <Tarefa_dois+0x74>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6979      	ldr	r1, [r7, #20]
 8000434:	2201      	movs	r2, #1
 8000436:	4252      	negs	r2, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f000 f913 	bl	8000664 <osMessagePut>
	 	    }
	     osDelay(1000);
 800043e:	23fa      	movs	r3, #250	@ 0xfa
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	0018      	movs	r0, r3
 8000444:	f000 f8e7 	bl	8000616 <osDelay>
	  event = osMessageGet(myQueueFila1Handle, osWaitForever);
 8000448:	e7cc      	b.n	80003e4 <Tarefa_dois+0x8>
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	20000034 	.word	0x20000034
 8000450:	20000038 	.word	0x20000038

08000454 <Tarefa_tres>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa_tres */
void Tarefa_tres(void const * argument)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b087      	sub	sp, #28
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	  {
		  osEvent event; // Estrutura para armazenar o evento recebido

		  	  for(;;)
		  	  {
		  		  event = osMessageGet(myQueueFila2Handle, osWaitForever);
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <Tarefa_tres+0x5c>)
 800045e:	6819      	ldr	r1, [r3, #0]
 8000460:	2408      	movs	r4, #8
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2201      	movs	r2, #1
 8000466:	4252      	negs	r2, r2
 8000468:	0018      	movs	r0, r3
 800046a:	f000 f937 	bl	80006dc <osMessageGet>
		  		  if (event.status == osEventMessage) {
 800046e:	0022      	movs	r2, r4
 8000470:	18bb      	adds	r3, r7, r2
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b10      	cmp	r3, #16
 8000476:	d116      	bne.n	80004a6 <Tarefa_tres+0x52>
		  		    int valueR = event.value.v;
 8000478:	18bb      	adds	r3, r7, r2
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	617b      	str	r3, [r7, #20]
		  		    if (valueR == 0) {
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d108      	bne.n	8000496 <Tarefa_tres+0x42>

		  		    GPIOA->ODR |= LED3_PIN;
 8000484:	23a0      	movs	r3, #160	@ 0xa0
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	23a0      	movs	r3, #160	@ 0xa0
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	2108      	movs	r1, #8
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	e007      	b.n	80004a6 <Tarefa_tres+0x52>

		  		    } else {
		  		    GPIOA->ODR &= ~LED3_PIN;
 8000496:	23a0      	movs	r3, #160	@ 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	23a0      	movs	r3, #160	@ 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2108      	movs	r1, #8
 80004a2:	438a      	bics	r2, r1
 80004a4:	615a      	str	r2, [r3, #20]

		  		    }
		  		    }
		  	    osDelay(1300);
 80004a6:	4b03      	ldr	r3, [pc, #12]	@ (80004b4 <Tarefa_tres+0x60>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 f8b4 	bl	8000616 <osDelay>
		  		  event = osMessageGet(myQueueFila2Handle, osWaitForever);
 80004ae:	e7d5      	b.n	800045c <Tarefa_tres+0x8>
 80004b0:	20000038 	.word	0x20000038
 80004b4:	00000514 	.word	0x00000514

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	46c0      	nop			@ (mov r8, r8)
 80004be:	e7fd      	b.n	80004bc <NMI_Handler+0x4>

080004c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	e7fd      	b.n	80004c4 <HardFault_Handler+0x4>

080004c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004cc:	f000 f83a 	bl	8000544 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004d0:	f001 fb00 	bl	8001ad4 <xTaskGetSchedulerState>
 80004d4:	0003      	movs	r3, r0
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d001      	beq.n	80004de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004da:	f001 fcbd 	bl	8001e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f0:	480d      	ldr	r0, [pc, #52]	@ (8000528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f4:	f7ff fff6 	bl	80004e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	@ (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	@ (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051e:	f001 fe8f 	bl	8002240 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000522:	f7ff febb 	bl	800029c <main>

08000526 <LoopForever>:

LoopForever:
  b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   r0, =_estack
 8000528:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000534:	08002338 	.word	0x08002338
  ldr r2, =_sbss
 8000538:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800053c:	20000d90 	.word	0x20000d90

08000540 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_IRQHandler>
	...

08000544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <HAL_IncTick+0x1c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <HAL_IncTick+0x20>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	18d2      	adds	r2, r2, r3
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <HAL_IncTick+0x20>)
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	20000004 	.word	0x20000004
 8000564:	20000040 	.word	0x20000040

08000568 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8000578:	1dbb      	adds	r3, r7, #6
 800057a:	2200      	movs	r2, #0
 800057c:	5e9b      	ldrsh	r3, [r3, r2]
 800057e:	2b84      	cmp	r3, #132	@ 0x84
 8000580:	d006      	beq.n	8000590 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8000582:	1dbb      	adds	r3, r7, #6
 8000584:	2200      	movs	r2, #0
 8000586:	5e9a      	ldrsh	r2, [r3, r2]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	3303      	adds	r3, #3
 800058e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8000590:	68fb      	ldr	r3, [r7, #12]
}
 8000592:	0018      	movs	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bd80      	pop	{r7, pc}

0800059a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80005a0:	f3ef 8305 	mrs	r3, IPSR
 80005a4:	607b      	str	r3, [r7, #4]
  return(result);
 80005a6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80005a8:	1e5a      	subs	r2, r3, #1
 80005aa:	4193      	sbcs	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
}
 80005ae:	0018      	movs	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80005ba:	f000 ff1b 	bl	80013f4 <vTaskStartScheduler>
  
  return osOK;
 80005be:	2300      	movs	r3, #0
}
 80005c0:	0018      	movs	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80005c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c8:	b087      	sub	sp, #28
 80005ca:	af02      	add	r7, sp, #8
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685c      	ldr	r4, [r3, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005dc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2208      	movs	r2, #8
 80005e2:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ffbf 	bl	8000568 <makeFreeRtosPriority>
 80005ea:	0001      	movs	r1, r0
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	230c      	movs	r3, #12
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	9100      	str	r1, [sp, #0]
 80005f6:	0013      	movs	r3, r2
 80005f8:	0032      	movs	r2, r6
 80005fa:	0029      	movs	r1, r5
 80005fc:	0020      	movs	r0, r4
 80005fe:	f000 fda5 	bl	800114c <xTaskCreate>
 8000602:	0003      	movs	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d001      	beq.n	800060c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8000608:	2300      	movs	r3, #0
 800060a:	e000      	b.n	800060e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800060c:	68fb      	ldr	r3, [r7, #12]
}
 800060e:	0018      	movs	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	b005      	add	sp, #20
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000616 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <osDelay+0x16>
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	e000      	b.n	800062e <osDelay+0x18>
 800062c:	2301      	movs	r3, #1
 800062e:	0018      	movs	r0, r3
 8000630:	f000 feba 	bl	80013a8 <vTaskDelay>
  
  return osOK;
 8000634:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	b004      	add	sp, #16
 800063c:	bd80      	pop	{r7, pc}

0800063e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	0019      	movs	r1, r3
 8000654:	f000 f9b0 	bl	80009b8 <xQueueGenericCreate>
 8000658:	0003      	movs	r3, r0
#endif
}
 800065a:	0018      	movs	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <osMessagePut+0x1e>
    ticks = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8000682:	f7ff ff8a 	bl	800059a <inHandlerMode>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d014      	beq.n	80006b4 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800068a:	2310      	movs	r3, #16
 800068c:	18fa      	adds	r2, r7, r3
 800068e:	2308      	movs	r3, #8
 8000690:	18f9      	adds	r1, r7, r3
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	2300      	movs	r3, #0
 8000696:	f000 faa8 	bl	8000bea <xQueueGenericSendFromISR>
 800069a:	0003      	movs	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d001      	beq.n	80006a4 <osMessagePut+0x40>
      return osErrorOS;
 80006a0:	23ff      	movs	r3, #255	@ 0xff
 80006a2:	e014      	b.n	80006ce <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d010      	beq.n	80006cc <osMessagePut+0x68>
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <osMessagePut+0x74>)
 80006ac:	2280      	movs	r2, #128	@ 0x80
 80006ae:	0552      	lsls	r2, r2, #21
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	e00b      	b.n	80006cc <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	2308      	movs	r3, #8
 80006b8:	18f9      	adds	r1, r7, r3
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	2300      	movs	r3, #0
 80006be:	f000 f9cc 	bl	8000a5a <xQueueGenericSend>
 80006c2:	0003      	movs	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d001      	beq.n	80006cc <osMessagePut+0x68>
      return osErrorOS;
 80006c8:	23ff      	movs	r3, #255	@ 0xff
 80006ca:	e000      	b.n	80006ce <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	0018      	movs	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b006      	add	sp, #24
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	e000ed04 	.word	0xe000ed04

080006dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b08b      	sub	sp, #44	@ 0x2c
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80006e8:	2114      	movs	r1, #20
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <osMessageGet+0x30>
    event.status = osErrorParameter;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	601a      	str	r2, [r3, #0]
    return event;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	187a      	adds	r2, r7, r1
 8000706:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000708:	c313      	stmia	r3!, {r0, r1, r4}
 800070a:	e051      	b.n	80007b0 <osMessageGet+0xd4>
  }
  
  taskWoken = pdFALSE;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3301      	adds	r3, #1
 8000718:	d103      	bne.n	8000722 <osMessageGet+0x46>
    ticks = portMAX_DELAY;
 800071a:	2301      	movs	r3, #1
 800071c:	425b      	negs	r3, r3
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000720:	e009      	b.n	8000736 <osMessageGet+0x5a>
  }
  else if (millisec != 0) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <osMessageGet+0x5a>
    ticks = millisec / portTICK_PERIOD_MS;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072e:	2b00      	cmp	r3, #0
 8000730:	d101      	bne.n	8000736 <osMessageGet+0x5a>
      ticks = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8000736:	f7ff ff30 	bl	800059a <inHandlerMode>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d01b      	beq.n	8000776 <osMessageGet+0x9a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800073e:	2320      	movs	r3, #32
 8000740:	18fa      	adds	r2, r7, r3
 8000742:	2414      	movs	r4, #20
 8000744:	193b      	adds	r3, r7, r4
 8000746:	1d19      	adds	r1, r3, #4
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fb7c 	bl	8000e48 <xQueueReceiveFromISR>
 8000750:	0003      	movs	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d103      	bne.n	800075e <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2210      	movs	r2, #16
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	e003      	b.n	8000766 <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800075e:	2314      	movs	r3, #20
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d01c      	beq.n	80007a6 <osMessageGet+0xca>
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <osMessageGet+0xdc>)
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	0552      	lsls	r2, r2, #21
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	e017      	b.n	80007a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8000776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000778:	2414      	movs	r4, #20
 800077a:	193b      	adds	r3, r7, r4
 800077c:	1d19      	adds	r1, r3, #4
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	0018      	movs	r0, r3
 8000782:	f000 faa9 	bl	8000cd8 <xQueueReceive>
 8000786:	0003      	movs	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d103      	bne.n	8000794 <osMessageGet+0xb8>
      /* We have mail */
      event.status = osEventMessage;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2210      	movs	r2, #16
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e008      	b.n	80007a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8000794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <osMessageGet+0xc2>
 800079a:	2200      	movs	r2, #0
 800079c:	e000      	b.n	80007a0 <osMessageGet+0xc4>
 800079e:	2240      	movs	r2, #64	@ 0x40
 80007a0:	2314      	movs	r3, #20
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2214      	movs	r2, #20
 80007aa:	18ba      	adds	r2, r7, r2
 80007ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ae:	c313      	stmia	r3!, {r0, r1, r4}
}
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b00b      	add	sp, #44	@ 0x2c
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	e000ed04 	.word	0xe000ed04

080007bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3308      	adds	r3, #8
 80007c8:	001a      	movs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4252      	negs	r2, r2
 80007d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3308      	adds	r3, #8
 80007da:	001a      	movs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3308      	adds	r3, #8
 80007e4:	001a      	movs	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}

0800080e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b004      	add	sp, #16
 8000850:	bd80      	pop	{r7, pc}

08000852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	d103      	bne.n	8000870 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e00c      	b.n	800088a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3308      	adds	r3, #8
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	e002      	b.n	800087e <vListInsert+0x2c>
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	429a      	cmp	r2, r3
 8000888:	d2f6      	bcs.n	8000878 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}

080008be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	6892      	ldr	r2, [r2, #8]
 80008d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	6852      	ldr	r2, [r2, #4]
 80008de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d103      	bne.n	80008f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	1e5a      	subs	r2, r3, #1
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	681b      	ldr	r3, [r3, #0]
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}

0800090e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <xQueueGenericReset+0x1a>
 8000922:	b672      	cpsid	i
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	e7fd      	b.n	8000924 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8000928:	f001 fa3a 	bl	8001da0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	434b      	muls	r3, r1
 800093a:	18d2      	adds	r2, r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2200      	movs	r2, #0
 8000944:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000956:	1e59      	subs	r1, r3, #1
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	434b      	muls	r3, r1
 800095e:	18d2      	adds	r2, r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2244      	movs	r2, #68	@ 0x44
 8000968:	21ff      	movs	r1, #255	@ 0xff
 800096a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2245      	movs	r2, #69	@ 0x45
 8000970:	21ff      	movs	r1, #255	@ 0xff
 8000972:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10d      	bne.n	8000996 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d013      	beq.n	80009aa <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3310      	adds	r3, #16
 8000986:	0018      	movs	r0, r3
 8000988:	f000 ff24 	bl	80017d4 <xTaskRemoveFromEventList>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d00c      	beq.n	80009aa <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000990:	f001 f9f6 	bl	8001d80 <vPortYield>
 8000994:	e009      	b.n	80009aa <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3310      	adds	r3, #16
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff ff0e 	bl	80007bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3324      	adds	r3, #36	@ 0x24
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ff09 	bl	80007bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80009aa:	f001 fa0b 	bl	8001dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b004      	add	sp, #16
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b08b      	sub	sp, #44	@ 0x2c
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <xQueueGenericCreate+0x1a>
 80009cc:	b672      	cpsid	i
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	e7fd      	b.n	80009ce <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	4353      	muls	r3, r2
 80009d8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3348      	adds	r3, #72	@ 0x48
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fa76 	bl	8001ed0 <pvPortMalloc>
 80009e4:	0003      	movs	r3, r0
 80009e6:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00e      	beq.n	8000a0c <xQueueGenericCreate+0x54>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3348      	adds	r3, #72	@ 0x48
 80009f6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781c      	ldrb	r4, [r3, #0]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	0023      	movs	r3, r4
 8000a08:	f000 f805 	bl	8000a16 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000a0c:	69bb      	ldr	r3, [r7, #24]
	}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b009      	add	sp, #36	@ 0x24
 8000a14:	bd90      	pop	{r4, r7, pc}

08000a16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	001a      	movs	r2, r3
 8000a24:	1cfb      	adds	r3, r7, #3
 8000a26:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	e002      	b.n	8000a3c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff ff5e 	bl	800090e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b08a      	sub	sp, #40	@ 0x28
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <xQueueGenericSend+0x22>
 8000a76:	b672      	cpsid	i
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <xQueueGenericSend+0x30>
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <xQueueGenericSend+0x34>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <xQueueGenericSend+0x36>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <xQueueGenericSend+0x40>
 8000a94:	b672      	cpsid	i
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	e7fd      	b.n	8000a96 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d103      	bne.n	8000aa8 <xQueueGenericSend+0x4e>
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d101      	bne.n	8000aac <xQueueGenericSend+0x52>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <xQueueGenericSend+0x54>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <xQueueGenericSend+0x5e>
 8000ab2:	b672      	cpsid	i
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	e7fd      	b.n	8000ab4 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ab8:	f001 f80c 	bl	8001ad4 <xTaskGetSchedulerState>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d102      	bne.n	8000ac6 <xQueueGenericSend+0x6c>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <xQueueGenericSend+0x70>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <xQueueGenericSend+0x72>
 8000aca:	2300      	movs	r3, #0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <xQueueGenericSend+0x7c>
 8000ad0:	b672      	cpsid	i
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	e7fd      	b.n	8000ad2 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000ad6:	f001 f963 	bl	8001da0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d302      	bcc.n	8000aec <xQueueGenericSend+0x92>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d11e      	bne.n	8000b2a <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fa0d 	bl	8000f12 <prvCopyDataToQueue>
 8000af8:	0003      	movs	r3, r0
 8000afa:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000afc:	6a3b      	ldr	r3, [r7, #32]
 8000afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d009      	beq.n	8000b18 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	3324      	adds	r3, #36	@ 0x24
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fe63 	bl	80017d4 <xTaskRemoveFromEventList>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d007      	beq.n	8000b22 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000b12:	f001 f935 	bl	8001d80 <vPortYield>
 8000b16:	e004      	b.n	8000b22 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000b1e:	f001 f92f 	bl	8001d80 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000b22:	f001 f94f 	bl	8001dc4 <vPortExitCritical>
				return pdPASS;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e05b      	b.n	8000be2 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000b30:	f001 f948 	bl	8001dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e054      	b.n	8000be2 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d106      	bne.n	8000b4c <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000b3e:	2314      	movs	r3, #20
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fea4 	bl	8001890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000b4c:	f001 f93a 	bl	8001dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000b50:	f000 fc86 	bl	8001460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b54:	f001 f924 	bl	8001da0 <vPortEnterCritical>
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	2244      	movs	r2, #68	@ 0x44
 8000b5c:	5c9b      	ldrb	r3, [r3, r2]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	3301      	adds	r3, #1
 8000b62:	d103      	bne.n	8000b6c <xQueueGenericSend+0x112>
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	2244      	movs	r2, #68	@ 0x44
 8000b68:	2100      	movs	r1, #0
 8000b6a:	5499      	strb	r1, [r3, r2]
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	2245      	movs	r2, #69	@ 0x45
 8000b70:	5c9b      	ldrb	r3, [r3, r2]
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	3301      	adds	r3, #1
 8000b76:	d103      	bne.n	8000b80 <xQueueGenericSend+0x126>
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	2245      	movs	r2, #69	@ 0x45
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	5499      	strb	r1, [r3, r2]
 8000b80:	f001 f920 	bl	8001dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b84:	1d3a      	adds	r2, r7, #4
 8000b86:	2314      	movs	r3, #20
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fe93 	bl	80018b8 <xTaskCheckForTimeOut>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d11e      	bne.n	8000bd4 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f000 fabf 	bl	800111c <prvIsQueueFull>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d011      	beq.n	8000bc6 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	3310      	adds	r3, #16
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fdf2 	bl	8001794 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fa3e 	bl	8001034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000bb8:	f000 fc5e 	bl	8001478 <xTaskResumeAll>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d18a      	bne.n	8000ad6 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8000bc0:	f001 f8de 	bl	8001d80 <vPortYield>
 8000bc4:	e787      	b.n	8000ad6 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fa33 	bl	8001034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000bce:	f000 fc53 	bl	8001478 <xTaskResumeAll>
 8000bd2:	e780      	b.n	8000ad6 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fa2c 	bl	8001034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000bdc:	f000 fc4c 	bl	8001478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000be0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b00a      	add	sp, #40	@ 0x28
 8000be8:	bd80      	pop	{r7, pc}

08000bea <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000bea:	b590      	push	{r4, r7, lr}
 8000bec:	b08b      	sub	sp, #44	@ 0x2c
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <xQueueGenericSendFromISR+0x1e>
 8000c02:	b672      	cpsid	i
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	e7fd      	b.n	8000c04 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d103      	bne.n	8000c16 <xQueueGenericSendFromISR+0x2c>
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <xQueueGenericSendFromISR+0x30>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <xQueueGenericSendFromISR+0x32>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <xQueueGenericSendFromISR+0x3c>
 8000c20:	b672      	cpsid	i
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	e7fd      	b.n	8000c22 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d103      	bne.n	8000c34 <xQueueGenericSendFromISR+0x4a>
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <xQueueGenericSendFromISR+0x4e>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <xQueueGenericSendFromISR+0x50>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <xQueueGenericSendFromISR+0x5a>
 8000c3e:	b672      	cpsid	i
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	e7fd      	b.n	8000c40 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c44:	f001 f8d6 	bl	8001df4 <ulSetInterruptMaskFromISR>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c50:	6a3b      	ldr	r3, [r7, #32]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d302      	bcc.n	8000c5e <xQueueGenericSendFromISR+0x74>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d131      	bne.n	8000cc2 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c5e:	241b      	movs	r4, #27
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	6a3a      	ldr	r2, [r7, #32]
 8000c64:	2145      	movs	r1, #69	@ 0x45
 8000c66:	5c52      	ldrb	r2, [r2, r1]
 8000c68:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c6e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	68b9      	ldr	r1, [r7, #8]
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f94b 	bl	8000f12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	d111      	bne.n	8000caa <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d016      	beq.n	8000cbc <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	3324      	adds	r3, #36	@ 0x24
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fd9e 	bl	80017d4 <xTaskRemoveFromEventList>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d00f      	beq.n	8000cbc <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00c      	beq.n	8000cbc <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e008      	b.n	8000cbc <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000caa:	231b      	movs	r3, #27
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	b259      	sxtb	r1, r3
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	2245      	movs	r2, #69	@ 0x45
 8000cba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 8000cc0:	e001      	b.n	8000cc6 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f001 f899 	bl	8001e00 <vClearInterruptMaskFromISR>

	return xReturn;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b00b      	add	sp, #44	@ 0x2c
 8000cd6:	bd90      	pop	{r4, r7, pc}

08000cd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000cec:	6a3b      	ldr	r3, [r7, #32]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <xQueueReceive+0x20>
 8000cf2:	b672      	cpsid	i
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	e7fd      	b.n	8000cf4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d103      	bne.n	8000d06 <xQueueReceive+0x2e>
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <xQueueReceive+0x32>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <xQueueReceive+0x34>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <xQueueReceive+0x3e>
 8000d10:	b672      	cpsid	i
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	e7fd      	b.n	8000d12 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d16:	f000 fedd 	bl	8001ad4 <xTaskGetSchedulerState>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d102      	bne.n	8000d24 <xQueueReceive+0x4c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <xQueueReceive+0x50>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <xQueueReceive+0x52>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <xQueueReceive+0x5c>
 8000d2e:	b672      	cpsid	i
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	e7fd      	b.n	8000d30 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d34:	f001 f834 	bl	8001da0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d01a      	beq.n	8000d7a <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f94c 	bl	8000fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d008      	beq.n	8000d72 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	3310      	adds	r3, #16
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 fd35 	bl	80017d4 <xTaskRemoveFromEventList>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000d6e:	f001 f807 	bl	8001d80 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000d72:	f001 f827 	bl	8001dc4 <vPortExitCritical>
				return pdPASS;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e062      	b.n	8000e40 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d103      	bne.n	8000d88 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000d80:	f001 f820 	bl	8001dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e05b      	b.n	8000e40 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d106      	bne.n	8000d9c <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000d8e:	2314      	movs	r3, #20
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fd7c 	bl	8001890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d9c:	f001 f812 	bl	8001dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000da0:	f000 fb5e 	bl	8001460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000da4:	f000 fffc 	bl	8001da0 <vPortEnterCritical>
 8000da8:	6a3b      	ldr	r3, [r7, #32]
 8000daa:	2244      	movs	r2, #68	@ 0x44
 8000dac:	5c9b      	ldrb	r3, [r3, r2]
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	d103      	bne.n	8000dbc <xQueueReceive+0xe4>
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	2244      	movs	r2, #68	@ 0x44
 8000db8:	2100      	movs	r1, #0
 8000dba:	5499      	strb	r1, [r3, r2]
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	2245      	movs	r2, #69	@ 0x45
 8000dc0:	5c9b      	ldrb	r3, [r3, r2]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	d103      	bne.n	8000dd0 <xQueueReceive+0xf8>
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	2245      	movs	r2, #69	@ 0x45
 8000dcc:	2100      	movs	r1, #0
 8000dce:	5499      	strb	r1, [r3, r2]
 8000dd0:	f000 fff8 	bl	8001dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000dd4:	1d3a      	adds	r2, r7, #4
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fd6b 	bl	80018b8 <xTaskCheckForTimeOut>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d11e      	bne.n	8000e24 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 f981 	bl	80010f0 <prvIsQueueEmpty>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d011      	beq.n	8000e16 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	3324      	adds	r3, #36	@ 0x24
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fcca 	bl	8001794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 f916 	bl	8001034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000e08:	f000 fb36 	bl	8001478 <xTaskResumeAll>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d191      	bne.n	8000d34 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8000e10:	f000 ffb6 	bl	8001d80 <vPortYield>
 8000e14:	e78e      	b.n	8000d34 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 f90b 	bl	8001034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e1e:	f000 fb2b 	bl	8001478 <xTaskResumeAll>
 8000e22:	e787      	b.n	8000d34 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 f904 	bl	8001034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e2c:	f000 fb24 	bl	8001478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 f95c 	bl	80010f0 <prvIsQueueEmpty>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d100      	bne.n	8000e3e <xQueueReceive+0x166>
 8000e3c:	e77a      	b.n	8000d34 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000e3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b00a      	add	sp, #40	@ 0x28
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b08b      	sub	sp, #44	@ 0x2c
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <xQueueReceiveFromISR+0x1c>
 8000e5e:	b672      	cpsid	i
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	e7fd      	b.n	8000e60 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <xQueueReceiveFromISR+0x2a>
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <xQueueReceiveFromISR+0x2e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <xQueueReceiveFromISR+0x30>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <xQueueReceiveFromISR+0x3a>
 8000e7c:	b672      	cpsid	i
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	e7fd      	b.n	8000e7e <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e82:	f000 ffb7 	bl	8001df4 <ulSetInterruptMaskFromISR>
 8000e86:	0003      	movs	r3, r0
 8000e88:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8e:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d032      	beq.n	8000efc <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8000e96:	2417      	movs	r4, #23
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	6a3a      	ldr	r2, [r7, #32]
 8000e9c:	2144      	movs	r1, #68	@ 0x44
 8000e9e:	5c52      	ldrb	r2, [r2, r1]
 8000ea0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 f89d 	bl	8000fe8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	d111      	bne.n	8000ee4 <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d016      	beq.n	8000ef6 <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	3310      	adds	r3, #16
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 fc81 	bl	80017d4 <xTaskRemoveFromEventList>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d00f      	beq.n	8000ef6 <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00c      	beq.n	8000ef6 <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	e008      	b.n	8000ef6 <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8000ee4:	2317      	movs	r3, #23
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	b259      	sxtb	r1, r3
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	2244      	movs	r2, #68	@ 0x44
 8000ef4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000efa:	e001      	b.n	8000f00 <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 ff7c 	bl	8001e00 <vClearInterruptMaskFromISR>

	return xReturn;
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b00b      	add	sp, #44	@ 0x2c
 8000f10:	bd90      	pop	{r4, r7, pc}

08000f12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10e      	bne.n	8000f4e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d14e      	bne.n	8000fd6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fde5 	bl	8001b0c <xTaskPriorityDisinherit>
 8000f42:	0003      	movs	r3, r0
 8000f44:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	e043      	b.n	8000fd6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d119      	bne.n	8000f88 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6858      	ldr	r0, [r3, #4]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	0019      	movs	r1, r3
 8000f60:	f001 f992 	bl	8002288 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	18d2      	adds	r2, r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d32b      	bcc.n	8000fd6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	e026      	b.n	8000fd6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68d8      	ldr	r0, [r3, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	0019      	movs	r1, r3
 8000f94:	f001 f978 	bl	8002288 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	18d2      	adds	r2, r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	425b      	negs	r3, r3
 8000fbe:	18d2      	adds	r2, r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d105      	bne.n	8000fd6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8000fde:	697b      	ldr	r3, [r7, #20]
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d018      	beq.n	800102c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	18d2      	adds	r2, r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	429a      	cmp	r2, r3
 8001012:	d303      	bcc.n	800101c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68d9      	ldr	r1, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	f001 f92e 	bl	8002288 <memcpy>
	}
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}

08001034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800103c:	f000 feb0 	bl	8001da0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001040:	230f      	movs	r3, #15
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	2145      	movs	r1, #69	@ 0x45
 8001048:	5c52      	ldrb	r2, [r2, r1]
 800104a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800104c:	e013      	b.n	8001076 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001052:	2b00      	cmp	r3, #0
 8001054:	d016      	beq.n	8001084 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3324      	adds	r3, #36	@ 0x24
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fbba 	bl	80017d4 <xTaskRemoveFromEventList>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001064:	f000 fc7a 	bl	800195c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001068:	210f      	movs	r1, #15
 800106a:	187b      	adds	r3, r7, r1
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	187b      	adds	r3, r7, r1
 8001074:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b25b      	sxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	dce5      	bgt.n	800104e <prvUnlockQueue+0x1a>
 8001082:	e000      	b.n	8001086 <prvUnlockQueue+0x52>
					break;
 8001084:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2245      	movs	r2, #69	@ 0x45
 800108a:	21ff      	movs	r1, #255	@ 0xff
 800108c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800108e:	f000 fe99 	bl	8001dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001092:	f000 fe85 	bl	8001da0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001096:	230e      	movs	r3, #14
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	2144      	movs	r1, #68	@ 0x44
 800109e:	5c52      	ldrb	r2, [r2, r1]
 80010a0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80010a2:	e013      	b.n	80010cc <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d016      	beq.n	80010da <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3310      	adds	r3, #16
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 fb8f 	bl	80017d4 <xTaskRemoveFromEventList>
 80010b6:	1e03      	subs	r3, r0, #0
 80010b8:	d001      	beq.n	80010be <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80010ba:	f000 fc4f 	bl	800195c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80010be:	210e      	movs	r1, #14
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80010cc:	230e      	movs	r3, #14
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dce5      	bgt.n	80010a4 <prvUnlockQueue+0x70>
 80010d8:	e000      	b.n	80010dc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80010da:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2244      	movs	r2, #68	@ 0x44
 80010e0:	21ff      	movs	r1, #255	@ 0xff
 80010e2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80010e4:	f000 fe6e 	bl	8001dc4 <vPortExitCritical>
}
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b004      	add	sp, #16
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010f8:	f000 fe52 	bl	8001da0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001104:	2301      	movs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e001      	b.n	800110e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800110e:	f000 fe59 	bl	8001dc4 <vPortExitCritical>

	return xReturn;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b004      	add	sp, #16
 800111a:	bd80      	pop	{r7, pc}

0800111c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001124:	f000 fe3c 	bl	8001da0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001130:	429a      	cmp	r2, r3
 8001132:	d102      	bne.n	800113a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001134:	2301      	movs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e001      	b.n	800113e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800113e:	f000 fe41 	bl	8001dc4 <vPortExitCritical>

	return xReturn;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b004      	add	sp, #16
 800114a:	bd80      	pop	{r7, pc}

0800114c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b08d      	sub	sp, #52	@ 0x34
 8001150:	af04      	add	r7, sp, #16
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	0018      	movs	r0, r3
 8001164:	f000 feb4 	bl	8001ed0 <pvPortMalloc>
 8001168:	0003      	movs	r3, r0
 800116a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d010      	beq.n	8001194 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001172:	2054      	movs	r0, #84	@ 0x54
 8001174:	f000 feac 	bl	8001ed0 <pvPortMalloc>
 8001178:	0003      	movs	r3, r0
 800117a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	631a      	str	r2, [r3, #48]	@ 0x30
 8001188:	e006      	b.n	8001198 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 ff4f 	bl	8002030 <vPortFree>
 8001192:	e001      	b.n	8001198 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d016      	beq.n	80011cc <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800119e:	1dbb      	adds	r3, r7, #6
 80011a0:	881a      	ldrh	r2, [r3, #0]
 80011a2:	683c      	ldr	r4, [r7, #0]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	0023      	movs	r3, r4
 80011ba:	f000 f80f 	bl	80011dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 f88d 	bl	80012e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	e002      	b.n	80011d2 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011cc:	2301      	movs	r3, #1
 80011ce:	425b      	negs	r3, r3
 80011d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80011d2:	69bb      	ldr	r3, [r7, #24]
	}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b009      	add	sp, #36	@ 0x24
 80011da:	bd90      	pop	{r4, r7, pc}

080011dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	493a      	ldr	r1, [pc, #232]	@ (80012dc <prvInitialiseNewTask+0x100>)
 80011f2:	468c      	mov	ip, r1
 80011f4:	4463      	add	r3, ip
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	18d3      	adds	r3, r2, r3
 80011fa:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2207      	movs	r2, #7
 8001200:	4393      	bics	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2207      	movs	r2, #7
 8001208:	4013      	ands	r3, r2
 800120a:	d002      	beq.n	8001212 <prvInitialiseNewTask+0x36>
 800120c:	b672      	cpsid	i
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	e7fd      	b.n	800120e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e013      	b.n	8001246 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	18d3      	adds	r3, r2, r3
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001228:	2134      	movs	r1, #52	@ 0x34
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	185b      	adds	r3, r3, r1
 8001230:	1c02      	adds	r2, r0, #0
 8001232:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d9e8      	bls.n	800121e <prvInitialiseNewTask+0x42>
 800124c:	e000      	b.n	8001250 <prvInitialiseNewTask+0x74>
			{
				break;
 800124e:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	2243      	movs	r2, #67	@ 0x43
 8001254:	2100      	movs	r1, #0
 8001256:	5499      	strb	r1, [r3, r2]
 8001258:	e003      	b.n	8001262 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2234      	movs	r2, #52	@ 0x34
 800125e:	2100      	movs	r1, #0
 8001260:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b06      	cmp	r3, #6
 8001266:	d901      	bls.n	800126c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001268:	2306      	movs	r3, #6
 800126a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	3304      	adds	r3, #4
 8001282:	0018      	movs	r0, r3
 8001284:	f7ff fab8 	bl	80007f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	3318      	adds	r3, #24
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fab3 	bl	80007f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	2207      	movs	r2, #7
 800129c:	1ad2      	subs	r2, r2, r3
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80012a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012aa:	2200      	movs	r2, #0
 80012ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80012ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b0:	2250      	movs	r2, #80	@ 0x50
 80012b2:	2100      	movs	r1, #0
 80012b4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fcd7 	bl	8001c70 <pxPortInitialiseStack>
 80012c2:	0002      	movs	r2, r0
 80012c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b006      	add	sp, #24
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	3fffffff 	.word	0x3fffffff

080012e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80012e8:	f000 fd5a 	bl	8001da0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80012ec:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <prvAddNewTaskToReadyList+0xb0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <prvAddNewTaskToReadyList+0xb0>)
 80012f4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80012f6:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <prvAddNewTaskToReadyList+0xb4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <prvAddNewTaskToReadyList+0xb4>)
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <prvAddNewTaskToReadyList+0xb0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d110      	bne.n	800132e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800130c:	f000 fb40 	bl	8001990 <prvInitialiseTaskLists>
 8001310:	e00d      	b.n	800132e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001312:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <prvAddNewTaskToReadyList+0xb8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <prvAddNewTaskToReadyList+0xb4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	429a      	cmp	r2, r3
 8001326:	d802      	bhi.n	800132e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <prvAddNewTaskToReadyList+0xb4>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800132e:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <prvAddNewTaskToReadyList+0xbc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <prvAddNewTaskToReadyList+0xbc>)
 8001336:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <prvAddNewTaskToReadyList+0xc0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d903      	bls.n	800134c <prvAddNewTaskToReadyList+0x6c>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <prvAddNewTaskToReadyList+0xc0>)
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001350:	0013      	movs	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	189b      	adds	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <prvAddNewTaskToReadyList+0xc4>)
 800135a:	189a      	adds	r2, r3, r2
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3304      	adds	r3, #4
 8001360:	0019      	movs	r1, r3
 8001362:	0010      	movs	r0, r2
 8001364:	f7ff fa53 	bl	800080e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001368:	f000 fd2c 	bl	8001dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <prvAddNewTaskToReadyList+0xb8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <prvAddNewTaskToReadyList+0xb4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137e:	429a      	cmp	r2, r3
 8001380:	d201      	bcs.n	8001386 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001382:	f000 fcfd 	bl	8001d80 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	20000144 	.word	0x20000144
 8001394:	20000044 	.word	0x20000044
 8001398:	20000150 	.word	0x20000150
 800139c:	20000160 	.word	0x20000160
 80013a0:	2000014c 	.word	0x2000014c
 80013a4:	20000048 	.word	0x20000048

080013a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d011      	beq.n	80013de <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <vTaskDelay+0x48>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <vTaskDelay+0x20>
 80013c2:	b672      	cpsid	i
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	e7fd      	b.n	80013c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80013c8:	f000 f84a 	bl	8001460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2100      	movs	r1, #0
 80013d0:	0018      	movs	r0, r3
 80013d2:	f000 fbf9 	bl	8001bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80013d6:	f000 f84f 	bl	8001478 <xTaskResumeAll>
 80013da:	0003      	movs	r3, r0
 80013dc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80013e4:	f000 fccc 	bl	8001d80 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b004      	add	sp, #16
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000016c 	.word	0x2000016c

080013f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80013fa:	4913      	ldr	r1, [pc, #76]	@ (8001448 <vTaskStartScheduler+0x54>)
 80013fc:	4813      	ldr	r0, [pc, #76]	@ (800144c <vTaskStartScheduler+0x58>)
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <vTaskStartScheduler+0x5c>)
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	f7ff fe9f 	bl	800114c <xTaskCreate>
 800140e:	0003      	movs	r3, r0
 8001410:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10d      	bne.n	8001434 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001418:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <vTaskStartScheduler+0x60>)
 800141c:	2201      	movs	r2, #1
 800141e:	4252      	negs	r2, r2
 8001420:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <vTaskStartScheduler+0x64>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <vTaskStartScheduler+0x68>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800142e:	f000 fc83 	bl	8001d38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001432:	e005      	b.n	8001440 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3301      	adds	r3, #1
 8001438:	d102      	bne.n	8001440 <vTaskStartScheduler+0x4c>
 800143a:	b672      	cpsid	i
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	e7fd      	b.n	800143c <vTaskStartScheduler+0x48>
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	08002328 	.word	0x08002328
 800144c:	08001971 	.word	0x08001971
 8001450:	20000168 	.word	0x20000168
 8001454:	20000164 	.word	0x20000164
 8001458:	20000150 	.word	0x20000150
 800145c:	20000148 	.word	0x20000148

08001460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <vTaskSuspendAll+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	4b02      	ldr	r3, [pc, #8]	@ (8001474 <vTaskSuspendAll+0x14>)
 800146c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000016c 	.word	0x2000016c

08001478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001486:	4b3a      	ldr	r3, [pc, #232]	@ (8001570 <xTaskResumeAll+0xf8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <xTaskResumeAll+0x1c>
 800148e:	b672      	cpsid	i
 8001490:	46c0      	nop			@ (mov r8, r8)
 8001492:	e7fd      	b.n	8001490 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001494:	f000 fc84 	bl	8001da0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001498:	4b35      	ldr	r3, [pc, #212]	@ (8001570 <xTaskResumeAll+0xf8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	4b34      	ldr	r3, [pc, #208]	@ (8001570 <xTaskResumeAll+0xf8>)
 80014a0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014a2:	4b33      	ldr	r3, [pc, #204]	@ (8001570 <xTaskResumeAll+0xf8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d15b      	bne.n	8001562 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014aa:	4b32      	ldr	r3, [pc, #200]	@ (8001574 <xTaskResumeAll+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d057      	beq.n	8001562 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014b2:	e02f      	b.n	8001514 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014b4:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <xTaskResumeAll+0x100>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3318      	adds	r3, #24
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff f9fc 	bl	80008be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3304      	adds	r3, #4
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff f9f7 	bl	80008be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d4:	4b29      	ldr	r3, [pc, #164]	@ (800157c <xTaskResumeAll+0x104>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d903      	bls.n	80014e4 <xTaskResumeAll+0x6c>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e0:	4b26      	ldr	r3, [pc, #152]	@ (800157c <xTaskResumeAll+0x104>)
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e8:	0013      	movs	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	189b      	adds	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4a23      	ldr	r2, [pc, #140]	@ (8001580 <xTaskResumeAll+0x108>)
 80014f2:	189a      	adds	r2, r3, r2
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3304      	adds	r3, #4
 80014f8:	0019      	movs	r1, r3
 80014fa:	0010      	movs	r0, r2
 80014fc:	f7ff f987 	bl	800080e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <xTaskResumeAll+0x10c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150a:	429a      	cmp	r2, r3
 800150c:	d302      	bcc.n	8001514 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800150e:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <xTaskResumeAll+0x110>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <xTaskResumeAll+0x100>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1cb      	bne.n	80014b4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001522:	f000 fab9 	bl	8001a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <xTaskResumeAll+0x114>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00f      	beq.n	8001552 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001532:	f000 f82d 	bl	8001590 <xTaskIncrementTick>
 8001536:	1e03      	subs	r3, r0, #0
 8001538:	d002      	beq.n	8001540 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <xTaskResumeAll+0x110>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f2      	bne.n	8001532 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <xTaskResumeAll+0x114>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <xTaskResumeAll+0x110>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800155a:	2301      	movs	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800155e:	f000 fc0f 	bl	8001d80 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001562:	f000 fc2f 	bl	8001dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8001566:	68bb      	ldr	r3, [r7, #8]
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000016c 	.word	0x2000016c
 8001574:	20000144 	.word	0x20000144
 8001578:	20000104 	.word	0x20000104
 800157c:	2000014c 	.word	0x2000014c
 8001580:	20000048 	.word	0x20000048
 8001584:	20000044 	.word	0x20000044
 8001588:	20000158 	.word	0x20000158
 800158c:	20000154 	.word	0x20000154

08001590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800159a:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <xTaskIncrementTick+0x134>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d000      	beq.n	80015a4 <xTaskIncrementTick+0x14>
 80015a2:	e085      	b.n	80016b0 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015a4:	4b48      	ldr	r3, [pc, #288]	@ (80016c8 <xTaskIncrementTick+0x138>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80015ac:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <xTaskIncrementTick+0x138>)
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d118      	bne.n	80015ea <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80015b8:	4b44      	ldr	r3, [pc, #272]	@ (80016cc <xTaskIncrementTick+0x13c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <xTaskIncrementTick+0x38>
 80015c2:	b672      	cpsid	i
 80015c4:	46c0      	nop			@ (mov r8, r8)
 80015c6:	e7fd      	b.n	80015c4 <xTaskIncrementTick+0x34>
 80015c8:	4b40      	ldr	r3, [pc, #256]	@ (80016cc <xTaskIncrementTick+0x13c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b40      	ldr	r3, [pc, #256]	@ (80016d0 <xTaskIncrementTick+0x140>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b3e      	ldr	r3, [pc, #248]	@ (80016cc <xTaskIncrementTick+0x13c>)
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	4b3e      	ldr	r3, [pc, #248]	@ (80016d0 <xTaskIncrementTick+0x140>)
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <xTaskIncrementTick+0x144>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	4b3c      	ldr	r3, [pc, #240]	@ (80016d4 <xTaskIncrementTick+0x144>)
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f000 fa57 	bl	8001a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80015ea:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <xTaskIncrementTick+0x148>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d349      	bcc.n	8001688 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015f4:	4b35      	ldr	r3, [pc, #212]	@ (80016cc <xTaskIncrementTick+0x13c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d104      	bne.n	8001608 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015fe:	4b36      	ldr	r3, [pc, #216]	@ (80016d8 <xTaskIncrementTick+0x148>)
 8001600:	2201      	movs	r2, #1
 8001602:	4252      	negs	r2, r2
 8001604:	601a      	str	r2, [r3, #0]
					break;
 8001606:	e03f      	b.n	8001688 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001608:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <xTaskIncrementTick+0x13c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d203      	bcs.n	8001628 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001620:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <xTaskIncrementTick+0x148>)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001626:	e02f      	b.n	8001688 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3304      	adds	r3, #4
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff f946 	bl	80008be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3318      	adds	r3, #24
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff f93d 	bl	80008be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <xTaskIncrementTick+0x14c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d903      	bls.n	8001658 <xTaskIncrementTick+0xc8>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <xTaskIncrementTick+0x14c>)
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800165c:	0013      	movs	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	189b      	adds	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4a1e      	ldr	r2, [pc, #120]	@ (80016e0 <xTaskIncrementTick+0x150>)
 8001666:	189a      	adds	r2, r3, r2
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3304      	adds	r3, #4
 800166c:	0019      	movs	r1, r3
 800166e:	0010      	movs	r0, r2
 8001670:	f7ff f8cd 	bl	800080e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001678:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <xTaskIncrementTick+0x154>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	429a      	cmp	r2, r3
 8001680:	d3b8      	bcc.n	80015f4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8001682:	2301      	movs	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001686:	e7b5      	b.n	80015f4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001688:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <xTaskIncrementTick+0x154>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800168e:	4914      	ldr	r1, [pc, #80]	@ (80016e0 <xTaskIncrementTick+0x150>)
 8001690:	0013      	movs	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	189b      	adds	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	585b      	ldr	r3, [r3, r1]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d901      	bls.n	80016a2 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <xTaskIncrementTick+0x158>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e004      	b.n	80016ba <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <xTaskIncrementTick+0x15c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <xTaskIncrementTick+0x15c>)
 80016b8:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80016ba:	697b      	ldr	r3, [r7, #20]
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b006      	add	sp, #24
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000016c 	.word	0x2000016c
 80016c8:	20000148 	.word	0x20000148
 80016cc:	200000fc 	.word	0x200000fc
 80016d0:	20000100 	.word	0x20000100
 80016d4:	2000015c 	.word	0x2000015c
 80016d8:	20000164 	.word	0x20000164
 80016dc:	2000014c 	.word	0x2000014c
 80016e0:	20000048 	.word	0x20000048
 80016e4:	20000044 	.word	0x20000044
 80016e8:	20000158 	.word	0x20000158
 80016ec:	20000154 	.word	0x20000154

080016f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <vTaskSwitchContext+0x90>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <vTaskSwitchContext+0x94>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001704:	e038      	b.n	8001778 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <vTaskSwitchContext+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800170c:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <vTaskSwitchContext+0x98>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	e008      	b.n	8001726 <vTaskSwitchContext+0x36>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <vTaskSwitchContext+0x30>
 800171a:	b672      	cpsid	i
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	e7fd      	b.n	800171c <vTaskSwitchContext+0x2c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4919      	ldr	r1, [pc, #100]	@ (800178c <vTaskSwitchContext+0x9c>)
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	0013      	movs	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	189b      	adds	r3, r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	585b      	ldr	r3, [r3, r1]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ed      	beq.n	8001714 <vTaskSwitchContext+0x24>
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	0013      	movs	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	189b      	adds	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <vTaskSwitchContext+0x9c>)
 8001744:	189b      	adds	r3, r3, r2
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3308      	adds	r3, #8
 800175a:	429a      	cmp	r2, r3
 800175c:	d104      	bne.n	8001768 <vTaskSwitchContext+0x78>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <vTaskSwitchContext+0xa0>)
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <vTaskSwitchContext+0x98>)
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000016c 	.word	0x2000016c
 8001784:	20000158 	.word	0x20000158
 8001788:	2000014c 	.word	0x2000014c
 800178c:	20000048 	.word	0x20000048
 8001790:	20000044 	.word	0x20000044

08001794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <vTaskPlaceOnEventList+0x16>
 80017a4:	b672      	cpsid	i
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	e7fd      	b.n	80017a6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <vTaskPlaceOnEventList+0x3c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3318      	adds	r3, #24
 80017b0:	001a      	movs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff f84b 	bl	8000852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2101      	movs	r1, #1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fa01 	bl	8001bc8 <prvAddCurrentTaskToDelayedList>
}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	20000044 	.word	0x20000044

080017d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <xTaskRemoveFromEventList+0x1c>
 80017ea:	b672      	cpsid	i
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	e7fd      	b.n	80017ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	3318      	adds	r3, #24
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff f862 	bl	80008be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <xTaskRemoveFromEventList+0xa4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11d      	bne.n	800183e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3304      	adds	r3, #4
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff f859 	bl	80008be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <xTaskRemoveFromEventList+0xa8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d903      	bls.n	8001820 <xTaskRemoveFromEventList+0x4c>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <xTaskRemoveFromEventList+0xa8>)
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001824:	0013      	movs	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	189b      	adds	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <xTaskRemoveFromEventList+0xac>)
 800182e:	189a      	adds	r2, r3, r2
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3304      	adds	r3, #4
 8001834:	0019      	movs	r1, r3
 8001836:	0010      	movs	r0, r2
 8001838:	f7fe ffe9 	bl	800080e <vListInsertEnd>
 800183c:	e007      	b.n	800184e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3318      	adds	r3, #24
 8001842:	001a      	movs	r2, r3
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <xTaskRemoveFromEventList+0xb0>)
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f7fe ffe0 	bl	800080e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <xTaskRemoveFromEventList+0xb4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	429a      	cmp	r2, r3
 800185a:	d905      	bls.n	8001868 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800185c:	2301      	movs	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <xTaskRemoveFromEventList+0xb8>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e001      	b.n	800186c <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	2000016c 	.word	0x2000016c
 800187c:	2000014c 	.word	0x2000014c
 8001880:	20000048 	.word	0x20000048
 8001884:	20000104 	.word	0x20000104
 8001888:	20000044 	.word	0x20000044
 800188c:	20000158 	.word	0x20000158

08001890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <vTaskInternalSetTimeOutState+0x20>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <vTaskInternalSetTimeOutState+0x24>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	605a      	str	r2, [r3, #4]
}
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b002      	add	sp, #8
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000015c 	.word	0x2000015c
 80018b4:	20000148 	.word	0x20000148

080018b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <xTaskCheckForTimeOut+0x16>
 80018c8:	b672      	cpsid	i
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	e7fd      	b.n	80018ca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <xTaskCheckForTimeOut+0x22>
 80018d4:	b672      	cpsid	i
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	e7fd      	b.n	80018d6 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 80018da:	f000 fa61 	bl	8001da0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <xTaskCheckForTimeOut+0x9c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	d102      	bne.n	80018fc <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e024      	b.n	8001946 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <xTaskCheckForTimeOut+0xa0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d007      	beq.n	8001918 <xTaskCheckForTimeOut+0x60>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	429a      	cmp	r2, r3
 8001910:	d302      	bcc.n	8001918 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001912:	2301      	movs	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e016      	b.n	8001946 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	429a      	cmp	r2, r3
 8001920:	d20c      	bcs.n	800193c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ffad 	bl	8001890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e004      	b.n	8001946 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001946:	f000 fa3d 	bl	8001dc4 <vPortExitCritical>

	return xReturn;
 800194a:	697b      	ldr	r3, [r7, #20]
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b006      	add	sp, #24
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000148 	.word	0x20000148
 8001958:	2000015c 	.word	0x2000015c

0800195c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001960:	4b02      	ldr	r3, [pc, #8]	@ (800196c <vTaskMissedYield+0x10>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000158 	.word	0x20000158

08001970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001978:	f000 f84e 	bl	8001a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <prvIdleTask+0x1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d9f9      	bls.n	8001978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001984:	f000 f9fc 	bl	8001d80 <vPortYield>
		prvCheckTasksWaitingTermination();
 8001988:	e7f6      	b.n	8001978 <prvIdleTask+0x8>
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	20000048 	.word	0x20000048

08001990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e00c      	b.n	80019b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	0013      	movs	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	189b      	adds	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <prvInitialiseTaskLists+0x68>)
 80019a8:	189b      	adds	r3, r3, r2
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7fe ff06 	bl	80007bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b06      	cmp	r3, #6
 80019ba:	d9ef      	bls.n	800199c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <prvInitialiseTaskLists+0x6c>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe fefc 	bl	80007bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <prvInitialiseTaskLists+0x70>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7fe fef8 	bl	80007bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <prvInitialiseTaskLists+0x74>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7fe fef4 	bl	80007bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <prvInitialiseTaskLists+0x78>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7fe fef0 	bl	80007bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <prvInitialiseTaskLists+0x7c>)
 80019de:	0018      	movs	r0, r3
 80019e0:	f7fe feec 	bl	80007bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <prvInitialiseTaskLists+0x80>)
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <prvInitialiseTaskLists+0x6c>)
 80019e8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <prvInitialiseTaskLists+0x84>)
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <prvInitialiseTaskLists+0x70>)
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000048 	.word	0x20000048
 80019fc:	200000d4 	.word	0x200000d4
 8001a00:	200000e8 	.word	0x200000e8
 8001a04:	20000104 	.word	0x20000104
 8001a08:	20000118 	.word	0x20000118
 8001a0c:	20000130 	.word	0x20000130
 8001a10:	200000fc 	.word	0x200000fc
 8001a14:	20000100 	.word	0x20000100

08001a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a1e:	e01a      	b.n	8001a56 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8001a20:	f000 f9be 	bl	8001da0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a24:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <prvCheckTasksWaitingTermination+0x50>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7fe ff44 	bl	80008be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <prvCheckTasksWaitingTermination+0x54>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <prvCheckTasksWaitingTermination+0x54>)
 8001a3e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <prvCheckTasksWaitingTermination+0x58>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <prvCheckTasksWaitingTermination+0x58>)
 8001a48:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8001a4a:	f000 f9bb 	bl	8001dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 f80f 	bl	8001a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <prvCheckTasksWaitingTermination+0x58>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1e0      	bne.n	8001a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000118 	.word	0x20000118
 8001a6c:	20000144 	.word	0x20000144
 8001a70:	2000012c 	.word	0x2000012c

08001a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fad5 	bl	8002030 <vPortFree>
			vPortFree( pxTCB );
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 fad1 	bl	8002030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <prvResetNextTaskUnblockTime+0x34>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d104      	bne.n	8001ab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <prvResetNextTaskUnblockTime+0x38>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4252      	negs	r2, r2
 8001aae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ab0:	e008      	b.n	8001ac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <prvResetNextTaskUnblockTime+0x34>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <prvResetNextTaskUnblockTime+0x38>)
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000fc 	.word	0x200000fc
 8001ad0:	20000164 	.word	0x20000164

08001ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <xTaskGetSchedulerState+0x30>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	e008      	b.n	8001afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <xTaskGetSchedulerState+0x34>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001af0:	2302      	movs	r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	e001      	b.n	8001afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001afa:	687b      	ldr	r3, [r7, #4]
	}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000150 	.word	0x20000150
 8001b08:	2000016c 	.word	0x2000016c

08001b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d046      	beq.n	8001bb0 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001b22:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <xTaskPriorityDisinherit+0xb0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d002      	beq.n	8001b32 <xTaskPriorityDisinherit+0x26>
 8001b2c:	b672      	cpsid	i
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	e7fd      	b.n	8001b2e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <xTaskPriorityDisinherit+0x34>
 8001b3a:	b672      	cpsid	i
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	e7fd      	b.n	8001b3c <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d02c      	beq.n	8001bb0 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d128      	bne.n	8001bb0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3304      	adds	r3, #4
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7fe feab 	bl	80008be <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b74:	2207      	movs	r2, #7
 8001b76:	1ad2      	subs	r2, r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <xTaskPriorityDisinherit+0xb4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d903      	bls.n	8001b90 <xTaskPriorityDisinherit+0x84>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <xTaskPriorityDisinherit+0xb4>)
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b94:	0013      	movs	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	189b      	adds	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4a09      	ldr	r2, [pc, #36]	@ (8001bc4 <xTaskPriorityDisinherit+0xb8>)
 8001b9e:	189a      	adds	r2, r3, r2
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	f7fe fe31 	bl	800080e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001bac:	2301      	movs	r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
	}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	20000044 	.word	0x20000044
 8001bc0:	2000014c 	.word	0x2000014c
 8001bc4:	20000048 	.word	0x20000048

08001bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0x90>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7fe fe6d 	bl	80008be <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	d10b      	bne.n	8001c02 <prvAddCurrentTaskToDelayedList+0x3a>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1d1a      	adds	r2, r3, #4
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <prvAddCurrentTaskToDelayedList+0x98>)
 8001bf8:	0011      	movs	r1, r2
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f7fe fe07 	bl	800080e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c00:	e026      	b.n	8001c50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	18d3      	adds	r3, r2, r3
 8001c08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c0a:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d209      	bcs.n	8001c2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3304      	adds	r3, #4
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f7fe fe13 	bl	8000852 <vListInsert>
}
 8001c2c:	e010      	b.n	8001c50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3304      	adds	r3, #4
 8001c38:	0019      	movs	r1, r3
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	f7fe fe09 	bl	8000852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d202      	bcs.n	8001c50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b004      	add	sp, #16
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000148 	.word	0x20000148
 8001c5c:	20000044 	.word	0x20000044
 8001c60:	20000130 	.word	0x20000130
 8001c64:	20000100 	.word	0x20000100
 8001c68:	200000fc 	.word	0x200000fc
 8001c6c:	20000164 	.word	0x20000164

08001c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2280      	movs	r2, #128	@ 0x80
 8001c86:	0452      	lsls	r2, r2, #17
 8001c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3b04      	subs	r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3b04      	subs	r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001c9c:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <pxPortInitialiseStack+0x50>)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3b14      	subs	r3, #20
 8001ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3b20      	subs	r3, #32
 8001cb2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	08001cc5 	.word	0x08001cc5

08001cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <prvTaskExitError+0x2c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	d002      	beq.n	8001cdc <prvTaskExitError+0x18>
 8001cd6:	b672      	cpsid	i
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	e7fd      	b.n	8001cd8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8001cdc:	b672      	cpsid	i
	while( ulDummy == 0 )
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0fc      	beq.n	8001ce0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46c0      	nop			@ (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8001cf8:	46c0      	nop			@ (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8001d00:	4a0b      	ldr	r2, [pc, #44]	@ (8001d30 <pxCurrentTCBConst2>)
 8001d02:	6813      	ldr	r3, [r2, #0]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	3020      	adds	r0, #32
 8001d08:	f380 8809 	msr	PSP, r0
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f380 8814 	msr	CONTROL, r0
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8001d18:	46ae      	mov	lr, r5
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	bc04      	pop	{r2}
 8001d1e:	b662      	cpsie	i
 8001d20:	4718      	bx	r3
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46c0      	nop			@ (mov r8, r8)
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46c0      	nop			@ (mov r8, r8)
 8001d2e:	46c0      	nop			@ (mov r8, r8)

08001d30 <pxCurrentTCBConst2>:
 8001d30:	20000044 	.word	0x20000044
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8001d34:	46c0      	nop			@ (mov r8, r8)
 8001d36:	46c0      	nop			@ (mov r8, r8)

08001d38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <xPortStartScheduler+0x40>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <xPortStartScheduler+0x40>)
 8001d42:	21ff      	movs	r1, #255	@ 0xff
 8001d44:	0409      	lsls	r1, r1, #16
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <xPortStartScheduler+0x40>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <xPortStartScheduler+0x40>)
 8001d50:	21ff      	movs	r1, #255	@ 0xff
 8001d52:	0609      	lsls	r1, r1, #24
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001d58:	f000 f898 	bl	8001e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <xPortStartScheduler+0x44>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8001d62:	f7ff ffcd 	bl	8001d00 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001d66:	f7ff fcc3 	bl	80016f0 <vTaskSwitchContext>
	prvTaskExitError();
 8001d6a:	f7ff ffab 	bl	8001cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	e000ed20 	.word	0xe000ed20
 8001d7c:	20000008 	.word	0x20000008

08001d80 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <vPortYield+0x1c>)
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	0552      	lsls	r2, r2, #21
 8001d8a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8001d8c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001d90:	f3bf 8f6f 	isb	sy
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001da4:	b672      	cpsid	i
	uxCriticalNesting++;
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <vPortEnterCritical+0x20>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <vPortEnterCritical+0x20>)
 8001dae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8001db0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001db4:	f3bf 8f6f 	isb	sy
}
 8001db8:	46c0      	nop			@ (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <vPortExitCritical+0x2c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <vPortExitCritical+0x12>
 8001dd0:	b672      	cpsid	i
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	e7fd      	b.n	8001dd2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <vPortExitCritical+0x2c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <vPortExitCritical+0x2c>)
 8001dde:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <vPortExitCritical+0x2c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d100      	bne.n	8001dea <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8001de8:	b662      	cpsie	i
	}
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000008 	.word	0x20000008

08001df4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8001df4:	f3ef 8010 	mrs	r0, PRIMASK
 8001df8:	b672      	cpsid	i
 8001dfa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8001dfc:	46c0      	nop			@ (mov r8, r8)
 8001dfe:	0018      	movs	r0, r3

08001e00 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8001e00:	f380 8810 	msr	PRIMASK, r0
 8001e04:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8001e06:	46c0      	nop			@ (mov r8, r8)
	...

08001e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001e10:	f3ef 8009 	mrs	r0, PSP
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <pxCurrentTCBConst>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	3820      	subs	r0, #32
 8001e1a:	6010      	str	r0, [r2, #0]
 8001e1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001e1e:	4644      	mov	r4, r8
 8001e20:	464d      	mov	r5, r9
 8001e22:	4656      	mov	r6, sl
 8001e24:	465f      	mov	r7, fp
 8001e26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001e28:	b508      	push	{r3, lr}
 8001e2a:	b672      	cpsid	i
 8001e2c:	f7ff fc60 	bl	80016f0 <vTaskSwitchContext>
 8001e30:	b662      	cpsie	i
 8001e32:	bc0c      	pop	{r2, r3}
 8001e34:	6811      	ldr	r1, [r2, #0]
 8001e36:	6808      	ldr	r0, [r1, #0]
 8001e38:	3010      	adds	r0, #16
 8001e3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001e3c:	46a0      	mov	r8, r4
 8001e3e:	46a9      	mov	r9, r5
 8001e40:	46b2      	mov	sl, r6
 8001e42:	46bb      	mov	fp, r7
 8001e44:	f380 8809 	msr	PSP, r0
 8001e48:	3820      	subs	r0, #32
 8001e4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001e4c:	4718      	bx	r3
 8001e4e:	46c0      	nop			@ (mov r8, r8)

08001e50 <pxCurrentTCBConst>:
 8001e50:	20000044 	.word	0x20000044
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8001e54:	46c0      	nop			@ (mov r8, r8)
 8001e56:	46c0      	nop			@ (mov r8, r8)

08001e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e5e:	f7ff ffc9 	bl	8001df4 <ulSetInterruptMaskFromISR>
 8001e62:	0003      	movs	r3, r0
 8001e64:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001e66:	f7ff fb93 	bl	8001590 <xTaskIncrementTick>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d003      	beq.n	8001e76 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <xPortSysTickHandler+0x30>)
 8001e70:	2280      	movs	r2, #128	@ 0x80
 8001e72:	0552      	lsls	r2, r2, #21
 8001e74:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7ff ffc1 	bl	8001e00 <vClearInterruptMaskFromISR>
}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	e000ed04 	.word	0xe000ed04

08001e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <vPortSetupTimerInterrupt+0x34>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <vPortSetupTimerInterrupt+0x38>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <vPortSetupTimerInterrupt+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	22fa      	movs	r2, #250	@ 0xfa
 8001ea2:	0091      	lsls	r1, r2, #2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe f92f 	bl	8000108 <__udivsi3>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	001a      	movs	r2, r3
 8001eae:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <vPortSetupTimerInterrupt+0x40>)
 8001eb0:	3a01      	subs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	@ (8001ec0 <vPortSetupTimerInterrupt+0x34>)
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	e000e010 	.word	0xe000e010
 8001ec4:	e000e018 	.word	0xe000e018
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	e000e014 	.word	0xe000e014

08001ed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8001edc:	f7ff fac0 	bl	8001460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <pvPortMalloc+0x148>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001ee8:	f000 f8f2 	bl	80020d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001eec:	4b4b      	ldr	r3, [pc, #300]	@ (800201c <pvPortMalloc+0x14c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d000      	beq.n	8001ef8 <pvPortMalloc+0x28>
 8001ef6:	e080      	b.n	8001ffa <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d013      	beq.n	8001f26 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8001efe:	2208      	movs	r2, #8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	189b      	adds	r3, r3, r2
 8001f04:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2207      	movs	r2, #7
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d00b      	beq.n	8001f26 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2207      	movs	r2, #7
 8001f12:	4393      	bics	r3, r2
 8001f14:	3308      	adds	r3, #8
 8001f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d002      	beq.n	8001f26 <pvPortMalloc+0x56>
 8001f20:	b672      	cpsid	i
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	e7fd      	b.n	8001f22 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d066      	beq.n	8001ffa <pvPortMalloc+0x12a>
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <pvPortMalloc+0x150>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d861      	bhi.n	8001ffa <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001f36:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <pvPortMalloc+0x154>)
 8001f38:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002024 <pvPortMalloc+0x154>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f40:	e004      	b.n	8001f4c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d903      	bls.n	8001f5e <pvPortMalloc+0x8e>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f1      	bne.n	8001f42 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <pvPortMalloc+0x148>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d048      	beq.n	8001ffa <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	189b      	adds	r3, r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	2308      	movs	r3, #8
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d917      	bls.n	8001fba <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	18d3      	adds	r3, r2, r3
 8001f90:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	d002      	beq.n	8001fa0 <pvPortMalloc+0xd0>
 8001f9a:	b672      	cpsid	i
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	e7fd      	b.n	8001f9c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1ad2      	subs	r2, r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f8eb 	bl	8002190 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fba:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <pvPortMalloc+0x150>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	1ad2      	subs	r2, r2, r3
 8001fc4:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <pvPortMalloc+0x150>)
 8001fc6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fc8:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <pvPortMalloc+0x150>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <pvPortMalloc+0x158>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d203      	bcs.n	8001fdc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <pvPortMalloc+0x150>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <pvPortMalloc+0x158>)
 8001fda:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <pvPortMalloc+0x14c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <pvPortMalloc+0x15c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <pvPortMalloc+0x15c>)
 8001ff8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001ffa:	f7ff fa3d 	bl	8001478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2207      	movs	r2, #7
 8002002:	4013      	ands	r3, r2
 8002004:	d002      	beq.n	800200c <pvPortMalloc+0x13c>
 8002006:	b672      	cpsid	i
 8002008:	46c0      	nop			@ (mov r8, r8)
 800200a:	e7fd      	b.n	8002008 <pvPortMalloc+0x138>
	return pvReturn;
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b006      	add	sp, #24
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	20000d78 	.word	0x20000d78
 800201c:	20000d8c 	.word	0x20000d8c
 8002020:	20000d7c 	.word	0x20000d7c
 8002024:	20000d70 	.word	0x20000d70
 8002028:	20000d80 	.word	0x20000d80
 800202c:	20000d84 	.word	0x20000d84

08002030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d03c      	beq.n	80020bc <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002042:	2308      	movs	r3, #8
 8002044:	425b      	negs	r3, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <vPortFree+0x94>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4013      	ands	r3, r2
 800205a:	d102      	bne.n	8002062 <vPortFree+0x32>
 800205c:	b672      	cpsid	i
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	e7fd      	b.n	800205e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <vPortFree+0x40>
 800206a:	b672      	cpsid	i
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	e7fd      	b.n	800206c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <vPortFree+0x94>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4013      	ands	r3, r2
 800207a:	d01f      	beq.n	80020bc <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11b      	bne.n	80020bc <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <vPortFree+0x94>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002094:	f7ff f9e4 	bl	8001460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <vPortFree+0x98>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	18d2      	adds	r2, r2, r3
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <vPortFree+0x98>)
 80020a4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 f871 	bl	8002190 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <vPortFree+0x9c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <vPortFree+0x9c>)
 80020b6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80020b8:	f7ff f9de 	bl	8001478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000d8c 	.word	0x20000d8c
 80020c8:	20000d7c 	.word	0x20000d7c
 80020cc:	20000d88 	.word	0x20000d88

080020d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020d6:	23c0      	movs	r3, #192	@ 0xc0
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80020dc:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <prvHeapInit+0xa8>)
 80020de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2207      	movs	r2, #7
 80020e4:	4013      	ands	r3, r2
 80020e6:	d00c      	beq.n	8002102 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3307      	adds	r3, #7
 80020ec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2207      	movs	r2, #7
 80020f2:	4393      	bics	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad2      	subs	r2, r2, r3
 80020fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <prvHeapInit+0xa8>)
 80020fe:	18d3      	adds	r3, r2, r3
 8002100:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002106:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <prvHeapInit+0xac>)
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <prvHeapInit+0xac>)
 800210e:	2200      	movs	r2, #0
 8002110:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	18d3      	adds	r3, r2, r3
 8002118:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800211a:	2208      	movs	r2, #8
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2207      	movs	r2, #7
 8002126:	4393      	bics	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <prvHeapInit+0xb0>)
 800212e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002130:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <prvHeapInit+0xb0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <prvHeapInit+0xb0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	1ad2      	subs	r2, r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <prvHeapInit+0xb0>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <prvHeapInit+0xb4>)
 800215c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <prvHeapInit+0xb8>)
 8002164:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <prvHeapInit+0xbc>)
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	0612      	lsls	r2, r2, #24
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	20000170 	.word	0x20000170
 800217c:	20000d70 	.word	0x20000d70
 8002180:	20000d78 	.word	0x20000d78
 8002184:	20000d80 	.word	0x20000d80
 8002188:	20000d7c 	.word	0x20000d7c
 800218c:	20000d8c 	.word	0x20000d8c

08002190 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <prvInsertBlockIntoFreeList+0xa8>)
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e002      	b.n	80021a4 <prvInsertBlockIntoFreeList+0x14>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d8f7      	bhi.n	800219e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	18d3      	adds	r3, r2, r3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d108      	bne.n	80021d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	18d2      	adds	r2, r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	18d2      	adds	r2, r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d118      	bne.n	8002218 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b14      	ldr	r3, [pc, #80]	@ (800223c <prvInsertBlockIntoFreeList+0xac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d00d      	beq.n	800220e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	18d2      	adds	r2, r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e008      	b.n	8002220 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <prvInsertBlockIntoFreeList+0xac>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e003      	b.n	8002220 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d002      	beq.n	800222e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	20000d70 	.word	0x20000d70
 800223c:	20000d78 	.word	0x20000d78

08002240 <__libc_init_array>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	2600      	movs	r6, #0
 8002244:	4c0c      	ldr	r4, [pc, #48]	@ (8002278 <__libc_init_array+0x38>)
 8002246:	4d0d      	ldr	r5, [pc, #52]	@ (800227c <__libc_init_array+0x3c>)
 8002248:	1b64      	subs	r4, r4, r5
 800224a:	10a4      	asrs	r4, r4, #2
 800224c:	42a6      	cmp	r6, r4
 800224e:	d109      	bne.n	8002264 <__libc_init_array+0x24>
 8002250:	2600      	movs	r6, #0
 8002252:	f000 f823 	bl	800229c <_init>
 8002256:	4c0a      	ldr	r4, [pc, #40]	@ (8002280 <__libc_init_array+0x40>)
 8002258:	4d0a      	ldr	r5, [pc, #40]	@ (8002284 <__libc_init_array+0x44>)
 800225a:	1b64      	subs	r4, r4, r5
 800225c:	10a4      	asrs	r4, r4, #2
 800225e:	42a6      	cmp	r6, r4
 8002260:	d105      	bne.n	800226e <__libc_init_array+0x2e>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	00b3      	lsls	r3, r6, #2
 8002266:	58eb      	ldr	r3, [r5, r3]
 8002268:	4798      	blx	r3
 800226a:	3601      	adds	r6, #1
 800226c:	e7ee      	b.n	800224c <__libc_init_array+0xc>
 800226e:	00b3      	lsls	r3, r6, #2
 8002270:	58eb      	ldr	r3, [r5, r3]
 8002272:	4798      	blx	r3
 8002274:	3601      	adds	r6, #1
 8002276:	e7f2      	b.n	800225e <__libc_init_array+0x1e>
 8002278:	08002330 	.word	0x08002330
 800227c:	08002330 	.word	0x08002330
 8002280:	08002334 	.word	0x08002334
 8002284:	08002330 	.word	0x08002330

08002288 <memcpy>:
 8002288:	2300      	movs	r3, #0
 800228a:	b510      	push	{r4, lr}
 800228c:	429a      	cmp	r2, r3
 800228e:	d100      	bne.n	8002292 <memcpy+0xa>
 8002290:	bd10      	pop	{r4, pc}
 8002292:	5ccc      	ldrb	r4, [r1, r3]
 8002294:	54c4      	strb	r4, [r0, r3]
 8002296:	3301      	adds	r3, #1
 8002298:	e7f8      	b.n	800228c <memcpy+0x4>
	...

0800229c <_init>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a2:	bc08      	pop	{r3}
 80022a4:	469e      	mov	lr, r3
 80022a6:	4770      	bx	lr

080022a8 <_fini>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr
